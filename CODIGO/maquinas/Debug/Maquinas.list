
Maquinas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003470  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800357c  0800357c  0001357c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080035f0  080035f0  000135f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035f4  080035f4  000135f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  080035f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013cc  20000160  08003758  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000152c  08003758  0002152c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001edb2  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000410b  00000000  00000000  0003ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008adc  00000000  00000000  00043046  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d08  00000000  00000000  0004bb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011f8  00000000  00000000  0004c830  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007bc6  00000000  00000000  0004da28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004743  00000000  00000000  000555ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00059d31  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002388  00000000  00000000  00059db0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	08003564 	.word	0x08003564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	08003564 	.word	0x08003564

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9b2 	bl	80004cc <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f968 	bl	800044c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f941 	bl	8000428 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 febc 	bl	8002f28 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200003a0 	.word	0x200003a0
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200003a0 	.word	0x200003a0

080001dc <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001dc:	2300      	movs	r3, #0
{ 
 80001de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001e0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001e2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d074      	beq.n	80002d4 <HAL_ADC_ConfigChannel+0xf8>
 80001ea:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001ec:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001ee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001f2:	2d06      	cmp	r5, #6
 80001f4:	6802      	ldr	r2, [r0, #0]
 80001f6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001fa:	680c      	ldr	r4, [r1, #0]
 80001fc:	d825      	bhi.n	800024a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001fe:	442b      	add	r3, r5
 8000200:	251f      	movs	r5, #31
 8000202:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000204:	3b05      	subs	r3, #5
 8000206:	409d      	lsls	r5, r3
 8000208:	ea26 0505 	bic.w	r5, r6, r5
 800020c:	fa04 f303 	lsl.w	r3, r4, r3
 8000210:	432b      	orrs	r3, r5
 8000212:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000214:	2c09      	cmp	r4, #9
 8000216:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800021a:	688d      	ldr	r5, [r1, #8]
 800021c:	d92f      	bls.n	800027e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800021e:	2607      	movs	r6, #7
 8000220:	4423      	add	r3, r4
 8000222:	68d1      	ldr	r1, [r2, #12]
 8000224:	3b1e      	subs	r3, #30
 8000226:	409e      	lsls	r6, r3
 8000228:	ea21 0106 	bic.w	r1, r1, r6
 800022c:	fa05 f303 	lsl.w	r3, r5, r3
 8000230:	430b      	orrs	r3, r1
 8000232:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000234:	f1a4 0310 	sub.w	r3, r4, #16
 8000238:	2b01      	cmp	r3, #1
 800023a:	d92b      	bls.n	8000294 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800023c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800023e:	2200      	movs	r2, #0
 8000240:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000244:	4618      	mov	r0, r3
 8000246:	b002      	add	sp, #8
 8000248:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800024a:	2d0c      	cmp	r5, #12
 800024c:	d80b      	bhi.n	8000266 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800024e:	442b      	add	r3, r5
 8000250:	251f      	movs	r5, #31
 8000252:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000254:	3b23      	subs	r3, #35	; 0x23
 8000256:	409d      	lsls	r5, r3
 8000258:	ea26 0505 	bic.w	r5, r6, r5
 800025c:	fa04 f303 	lsl.w	r3, r4, r3
 8000260:	432b      	orrs	r3, r5
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
 8000264:	e7d6      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000266:	442b      	add	r3, r5
 8000268:	251f      	movs	r5, #31
 800026a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800026c:	3b41      	subs	r3, #65	; 0x41
 800026e:	409d      	lsls	r5, r3
 8000270:	ea26 0505 	bic.w	r5, r6, r5
 8000274:	fa04 f303 	lsl.w	r3, r4, r3
 8000278:	432b      	orrs	r3, r5
 800027a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800027c:	e7ca      	b.n	8000214 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800027e:	2607      	movs	r6, #7
 8000280:	6911      	ldr	r1, [r2, #16]
 8000282:	4423      	add	r3, r4
 8000284:	409e      	lsls	r6, r3
 8000286:	ea21 0106 	bic.w	r1, r1, r6
 800028a:	fa05 f303 	lsl.w	r3, r5, r3
 800028e:	430b      	orrs	r3, r1
 8000290:	6113      	str	r3, [r2, #16]
 8000292:	e7cf      	b.n	8000234 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000294:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <HAL_ADC_ConfigChannel+0xfc>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d116      	bne.n	80002c8 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800029a:	6893      	ldr	r3, [r2, #8]
 800029c:	021b      	lsls	r3, r3, #8
 800029e:	d4cd      	bmi.n	800023c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002aa:	d1c7      	bne.n	800023c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <HAL_ADC_ConfigChannel+0x100>)
 80002ae:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <HAL_ADC_ConfigChannel+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80002b6:	230a      	movs	r3, #10
 80002b8:	4353      	muls	r3, r2
            wait_loop_index--;
 80002ba:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002bc:	9b01      	ldr	r3, [sp, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0bc      	beq.n	800023c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002c2:	9b01      	ldr	r3, [sp, #4]
 80002c4:	3b01      	subs	r3, #1
 80002c6:	e7f8      	b.n	80002ba <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e7b4      	b.n	800023e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002d4:	2302      	movs	r3, #2
 80002d6:	e7b5      	b.n	8000244 <HAL_ADC_ConfigChannel+0x68>
 80002d8:	40012400 	.word	0x40012400
 80002dc:	20000118 	.word	0x20000118
 80002e0:	000f4240 	.word	0x000f4240

080002e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002e4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e6:	6803      	ldr	r3, [r0, #0]
{
 80002e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002ea:	689a      	ldr	r2, [r3, #8]
 80002ec:	07d2      	lsls	r2, r2, #31
 80002ee:	d401      	bmi.n	80002f4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002f0:	2000      	movs	r0, #0
 80002f2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002f4:	689a      	ldr	r2, [r3, #8]
 80002f6:	f022 0201 	bic.w	r2, r2, #1
 80002fa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002fc:	f7ff ff68 	bl	80001d0 <HAL_GetTick>
 8000300:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000302:	6823      	ldr	r3, [r4, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	07db      	lsls	r3, r3, #31
 8000308:	d5f2      	bpl.n	80002f0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800030a:	f7ff ff61 	bl	80001d0 <HAL_GetTick>
 800030e:	1b40      	subs	r0, r0, r5
 8000310:	2802      	cmp	r0, #2
 8000312:	d9f6      	bls.n	8000302 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000316:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800031e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000326:	bd38      	pop	{r3, r4, r5, pc}

08000328 <HAL_ADC_Init>:
{
 8000328:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800032a:	4604      	mov	r4, r0
 800032c:	2800      	cmp	r0, #0
 800032e:	d071      	beq.n	8000414 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000332:	b923      	cbnz	r3, 800033e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000334:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000336:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800033a:	f002 fe17 	bl	8002f6c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800033e:	4620      	mov	r0, r4
 8000340:	f7ff ffd0 	bl	80002e4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000344:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000346:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800034c:	d164      	bne.n	8000418 <HAL_ADC_Init+0xf0>
 800034e:	2800      	cmp	r0, #0
 8000350:	d162      	bne.n	8000418 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000352:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000358:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000362:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000364:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000366:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000368:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800036e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000372:	d038      	beq.n	80003e6 <HAL_ADC_Init+0xbe>
 8000374:	2901      	cmp	r1, #1
 8000376:	bf14      	ite	ne
 8000378:	4606      	movne	r6, r0
 800037a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800037e:	6965      	ldr	r5, [r4, #20]
 8000380:	2d01      	cmp	r5, #1
 8000382:	d107      	bne.n	8000394 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000384:	2b00      	cmp	r3, #0
 8000386:	d130      	bne.n	80003ea <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000388:	69a3      	ldr	r3, [r4, #24]
 800038a:	3b01      	subs	r3, #1
 800038c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000390:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000394:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000396:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800039a:	685d      	ldr	r5, [r3, #4]
 800039c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80003a0:	ea45 0506 	orr.w	r5, r5, r6
 80003a4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003a6:	689e      	ldr	r6, [r3, #8]
 80003a8:	4d1d      	ldr	r5, [pc, #116]	; (8000420 <HAL_ADC_Init+0xf8>)
 80003aa:	ea05 0506 	and.w	r5, r5, r6
 80003ae:	ea45 0502 	orr.w	r5, r5, r2
 80003b2:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003b4:	d001      	beq.n	80003ba <HAL_ADC_Init+0x92>
 80003b6:	2901      	cmp	r1, #1
 80003b8:	d120      	bne.n	80003fc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003ba:	6921      	ldr	r1, [r4, #16]
 80003bc:	3901      	subs	r1, #1
 80003be:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003c0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003c2:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003c6:	4329      	orrs	r1, r5
 80003c8:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003ca:	6899      	ldr	r1, [r3, #8]
 80003cc:	4b15      	ldr	r3, [pc, #84]	; (8000424 <HAL_ADC_Init+0xfc>)
 80003ce:	400b      	ands	r3, r1
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d115      	bne.n	8000400 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003d4:	2300      	movs	r3, #0
 80003d6:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003da:	f023 0303 	bic.w	r3, r3, #3
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e6:	460e      	mov	r6, r1
 80003e8:	e7c9      	b.n	800037e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003fa:	e7cb      	b.n	8000394 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80003fc:	2100      	movs	r1, #0
 80003fe:	e7df      	b.n	80003c0 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000402:	f023 0312 	bic.w	r3, r3, #18
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000414:	2001      	movs	r0, #1
}
 8000416:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000418:	f043 0310 	orr.w	r3, r3, #16
 800041c:	62a3      	str	r3, [r4, #40]	; 0x28
 800041e:	e7f9      	b.n	8000414 <HAL_ADC_Init+0xec>
 8000420:	ffe1f7fd 	.word	0xffe1f7fd
 8000424:	ff1f0efe 	.word	0xff1f0efe

08000428 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800042a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800042c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800042e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000436:	041b      	lsls	r3, r3, #16
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800043e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000442:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000444:	60d3      	str	r3, [r2, #12]
 8000446:	4770      	bx	lr
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	68dc      	ldr	r4, [r3, #12]
 8000452:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000456:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800045c:	2b04      	cmp	r3, #4
 800045e:	bf28      	it	cs
 8000460:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000462:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000468:	bf98      	it	ls
 800046a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	fa05 f303 	lsl.w	r3, r5, r3
 8000470:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000474:	bf88      	it	hi
 8000476:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4019      	ands	r1, r3
 800047a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800047c:	fa05 f404 	lsl.w	r4, r5, r4
 8000480:	3c01      	subs	r4, #1
 8000482:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000484:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000486:	ea42 0201 	orr.w	r2, r2, r1
 800048a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048e:	bfaf      	iteee	ge
 8000490:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	4b06      	ldrlt	r3, [pc, #24]	; (80004b0 <HAL_NVIC_SetPriority+0x64>)
 8000496:	f000 000f 	andlt.w	r0, r0, #15
 800049a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	bfa5      	ittet	ge
 800049e:	b2d2      	uxtbge	r2, r2
 80004a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	e000ed14 	.word	0xe000ed14

080004b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004b4:	2301      	movs	r3, #1
 80004b6:	0942      	lsrs	r2, r0, #5
 80004b8:	f000 001f 	and.w	r0, r0, #31
 80004bc:	fa03 f000 	lsl.w	r0, r3, r0
 80004c0:	4b01      	ldr	r3, [pc, #4]	; (80004c8 <HAL_NVIC_EnableIRQ+0x14>)
 80004c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80004c6:	4770      	bx	lr
 80004c8:	e000e100 	.word	0xe000e100

080004cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004cc:	3801      	subs	r0, #1
 80004ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004d2:	d20a      	bcs.n	80004ea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000e010 	.word	0xe000e010
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80004fc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004fe:	4616      	mov	r6, r2
 8000500:	4b65      	ldr	r3, [pc, #404]	; (8000698 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000502:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80006a8 <HAL_GPIO_Init+0x1b0>
 8000506:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80006ac <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800050a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800050e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000510:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000514:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000518:	45a0      	cmp	r8, r4
 800051a:	d17f      	bne.n	800061c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800051c:	684d      	ldr	r5, [r1, #4]
 800051e:	2d12      	cmp	r5, #18
 8000520:	f000 80af 	beq.w	8000682 <HAL_GPIO_Init+0x18a>
 8000524:	f200 8088 	bhi.w	8000638 <HAL_GPIO_Init+0x140>
 8000528:	2d02      	cmp	r5, #2
 800052a:	f000 80a7 	beq.w	800067c <HAL_GPIO_Init+0x184>
 800052e:	d87c      	bhi.n	800062a <HAL_GPIO_Init+0x132>
 8000530:	2d00      	cmp	r5, #0
 8000532:	f000 808e 	beq.w	8000652 <HAL_GPIO_Init+0x15a>
 8000536:	2d01      	cmp	r5, #1
 8000538:	f000 809e 	beq.w	8000678 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800053c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000540:	2cff      	cmp	r4, #255	; 0xff
 8000542:	bf93      	iteet	ls
 8000544:	4682      	movls	sl, r0
 8000546:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800054a:	3d08      	subhi	r5, #8
 800054c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000550:	bf92      	itee	ls
 8000552:	00b5      	lslls	r5, r6, #2
 8000554:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000558:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800055a:	fa09 f805 	lsl.w	r8, r9, r5
 800055e:	ea2b 0808 	bic.w	r8, fp, r8
 8000562:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000566:	bf88      	it	hi
 8000568:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800056c:	ea48 0505 	orr.w	r5, r8, r5
 8000570:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000574:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000578:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800057c:	d04e      	beq.n	800061c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800057e:	4d47      	ldr	r5, [pc, #284]	; (800069c <HAL_GPIO_Init+0x1a4>)
 8000580:	4f46      	ldr	r7, [pc, #280]	; (800069c <HAL_GPIO_Init+0x1a4>)
 8000582:	69ad      	ldr	r5, [r5, #24]
 8000584:	f026 0803 	bic.w	r8, r6, #3
 8000588:	f045 0501 	orr.w	r5, r5, #1
 800058c:	61bd      	str	r5, [r7, #24]
 800058e:	69bd      	ldr	r5, [r7, #24]
 8000590:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000594:	f005 0501 	and.w	r5, r5, #1
 8000598:	9501      	str	r5, [sp, #4]
 800059a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800059e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005a8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005ac:	fa09 f90b 	lsl.w	r9, r9, fp
 80005b0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005b4:	4d3a      	ldr	r5, [pc, #232]	; (80006a0 <HAL_GPIO_Init+0x1a8>)
 80005b6:	42a8      	cmp	r0, r5
 80005b8:	d068      	beq.n	800068c <HAL_GPIO_Init+0x194>
 80005ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005be:	42a8      	cmp	r0, r5
 80005c0:	d066      	beq.n	8000690 <HAL_GPIO_Init+0x198>
 80005c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c6:	42a8      	cmp	r0, r5
 80005c8:	d064      	beq.n	8000694 <HAL_GPIO_Init+0x19c>
 80005ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ce:	42a8      	cmp	r0, r5
 80005d0:	bf0c      	ite	eq
 80005d2:	2503      	moveq	r5, #3
 80005d4:	2504      	movne	r5, #4
 80005d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80005da:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005de:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80005e8:	bf14      	ite	ne
 80005ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005ec:	43a5      	biceq	r5, r4
 80005ee:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80005f0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005f2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80005f6:	bf14      	ite	ne
 80005f8:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80005fa:	43a5      	biceq	r5, r4
 80005fc:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80005fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000600:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000604:	bf14      	ite	ne
 8000606:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000608:	43a5      	biceq	r5, r4
 800060a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800060c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000612:	bf14      	ite	ne
 8000614:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000616:	ea25 0404 	biceq.w	r4, r5, r4
 800061a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800061c:	3601      	adds	r6, #1
 800061e:	2e10      	cmp	r6, #16
 8000620:	f47f af73 	bne.w	800050a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000624:	b003      	add	sp, #12
 8000626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800062a:	2d03      	cmp	r5, #3
 800062c:	d022      	beq.n	8000674 <HAL_GPIO_Init+0x17c>
 800062e:	2d11      	cmp	r5, #17
 8000630:	d184      	bne.n	800053c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000632:	68ca      	ldr	r2, [r1, #12]
 8000634:	3204      	adds	r2, #4
          break;
 8000636:	e781      	b.n	800053c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000638:	4f1a      	ldr	r7, [pc, #104]	; (80006a4 <HAL_GPIO_Init+0x1ac>)
 800063a:	42bd      	cmp	r5, r7
 800063c:	d009      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800063e:	d812      	bhi.n	8000666 <HAL_GPIO_Init+0x16e>
 8000640:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006b0 <HAL_GPIO_Init+0x1b8>
 8000644:	454d      	cmp	r5, r9
 8000646:	d004      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 8000648:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800064c:	454d      	cmp	r5, r9
 800064e:	f47f af75 	bne.w	800053c <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000652:	688a      	ldr	r2, [r1, #8]
 8000654:	b1c2      	cbz	r2, 8000688 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000656:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000658:	bf0c      	ite	eq
 800065a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800065e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000662:	2208      	movs	r2, #8
 8000664:	e76a      	b.n	800053c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000666:	4575      	cmp	r5, lr
 8000668:	d0f3      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800066a:	4565      	cmp	r5, ip
 800066c:	d0f1      	beq.n	8000652 <HAL_GPIO_Init+0x15a>
 800066e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80006b4 <HAL_GPIO_Init+0x1bc>
 8000672:	e7eb      	b.n	800064c <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000674:	2200      	movs	r2, #0
 8000676:	e761      	b.n	800053c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000678:	68ca      	ldr	r2, [r1, #12]
          break;
 800067a:	e75f      	b.n	800053c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800067c:	68ca      	ldr	r2, [r1, #12]
 800067e:	3208      	adds	r2, #8
          break;
 8000680:	e75c      	b.n	800053c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000682:	68ca      	ldr	r2, [r1, #12]
 8000684:	320c      	adds	r2, #12
          break;
 8000686:	e759      	b.n	800053c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000688:	2204      	movs	r2, #4
 800068a:	e757      	b.n	800053c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800068c:	2500      	movs	r5, #0
 800068e:	e7a2      	b.n	80005d6 <HAL_GPIO_Init+0xde>
 8000690:	2501      	movs	r5, #1
 8000692:	e7a0      	b.n	80005d6 <HAL_GPIO_Init+0xde>
 8000694:	2502      	movs	r5, #2
 8000696:	e79e      	b.n	80005d6 <HAL_GPIO_Init+0xde>
 8000698:	40010400 	.word	0x40010400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800
 80006a4:	10210000 	.word	0x10210000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10110000 	.word	0x10110000
 80006b4:	10220000 	.word	0x10220000

080006b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80006b8:	b10a      	cbz	r2, 80006be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006ba:	6101      	str	r1, [r0, #16]
 80006bc:	4770      	bx	lr
 80006be:	0409      	lsls	r1, r1, #16
 80006c0:	e7fb      	b.n	80006ba <HAL_GPIO_WritePin+0x2>

080006c2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80006c2:	68c3      	ldr	r3, [r0, #12]
 80006c4:	4059      	eors	r1, r3
 80006c6:	60c1      	str	r1, [r0, #12]
 80006c8:	4770      	bx	lr

080006ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80006ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80006ce:	4604      	mov	r4, r0
{
 80006d0:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80006d2:	2800      	cmp	r0, #0
 80006d4:	d060      	beq.n	8000798 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 80006d6:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80006da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006de:	b91b      	cbnz	r3, 80006e8 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80006e0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80006e4:	f002 fd72 	bl	80031cc <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80006e8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80006ea:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80006ec:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80006ee:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80006f2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80006f6:	f001 fa6b 	bl	8001bd0 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006fe:	682b      	ldr	r3, [r5, #0]
 8000700:	f104 0804 	add.w	r8, r4, #4
 8000704:	6033      	str	r3, [r6, #0]
 8000706:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800070a:	6820      	ldr	r0, [r4, #0]
 800070c:	f001 fa50 	bl	8001bb0 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000710:	2100      	movs	r1, #0
 8000712:	6820      	ldr	r0, [r4, #0]
 8000714:	f001 fa66 	bl	8001be4 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 8000718:	2100      	movs	r1, #0
 800071a:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800071c:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 800071e:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000720:	4608      	mov	r0, r1
 8000722:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 8000726:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 800072a:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800072c:	3101      	adds	r1, #1
 800072e:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 8000730:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000734:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 8000738:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 800073a:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 800073c:	6410      	str	r0, [r2, #64]	; 0x40
 800073e:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000742:	d1f0      	bne.n	8000726 <HAL_PCD_Init+0x5c>
 8000744:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000746:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000748:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800074c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800074e:	3201      	adds	r2, #1
 8000750:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000752:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000756:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 800075a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800075e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000762:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000766:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 800076a:	d1ed      	bne.n	8000748 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800076c:	466e      	mov	r6, sp
 800076e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000770:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000772:	682b      	ldr	r3, [r5, #0]
 8000774:	6033      	str	r3, [r6, #0]
 8000776:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800077a:	6820      	ldr	r0, [r4, #0]
 800077c:	f001 fa34 	bl	8001be8 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000780:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000782:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000786:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000788:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800078c:	f001 fd04 	bl	8002198 <USB_DevDisconnect>
  return HAL_OK;
 8000790:	2000      	movs	r0, #0
}
 8000792:	b006      	add	sp, #24
 8000794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000798:	2001      	movs	r0, #1
 800079a:	e7fa      	b.n	8000792 <HAL_PCD_Init+0xc8>

0800079c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800079c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 80007a0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007a2:	2b01      	cmp	r3, #1
{
 80007a4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007a6:	d00e      	beq.n	80007c6 <HAL_PCD_Start+0x2a>
 80007a8:	2101      	movs	r1, #1
 80007aa:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 80007ae:	f002 fe34 	bl	800341a <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 80007b2:	6820      	ldr	r0, [r4, #0]
 80007b4:	f001 fcee 	bl	8002194 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80007b8:	6820      	ldr	r0, [r4, #0]
 80007ba:	f001 fa00 	bl	8001bbe <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80007be:	2000      	movs	r0, #0
 80007c0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 80007c4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80007c6:	2002      	movs	r0, #2
}
 80007c8:	bd10      	pop	{r4, pc}

080007ca <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80007ca:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 80007ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80007d0:	2a01      	cmp	r2, #1
{
 80007d2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80007d4:	d00b      	beq.n	80007ee <HAL_PCD_SetAddress+0x24>
 80007d6:	2201      	movs	r2, #1
 80007d8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 80007dc:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80007e0:	6800      	ldr	r0, [r0, #0]
 80007e2:	f001 fcd1 	bl	8002188 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80007ec:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80007ee:	2002      	movs	r0, #2
  return HAL_OK;
}
 80007f0:	bd10      	pop	{r4, pc}

080007f2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80007f2:	b538      	push	{r3, r4, r5, lr}
 80007f4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80007f6:	b248      	sxtb	r0, r1
 80007f8:	2800      	cmp	r0, #0
 80007fa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80007fe:	bfb5      	itete	lt
 8000800:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000804:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000808:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800080a:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800080e:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 8000810:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000812:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000814:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000816:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 800081a:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 800081c:	2b01      	cmp	r3, #1
 800081e:	d009      	beq.n	8000834 <HAL_PCD_EP_Open+0x42>
 8000820:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000822:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000824:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000828:	f001 f9fa 	bl	8001c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800082c:	2000      	movs	r0, #0
 800082e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 8000832:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000834:	2002      	movs	r0, #2
}
 8000836:	bd38      	pop	{r3, r4, r5, pc}

08000838 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000838:	b24b      	sxtb	r3, r1
 800083a:	2b00      	cmp	r3, #0
 800083c:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000840:	bfb5      	itete	lt
 8000842:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000846:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800084a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800084c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000850:	0fdb      	lsrs	r3, r3, #31
{  
 8000852:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000854:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000856:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000858:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800085c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800085e:	2b01      	cmp	r3, #1
 8000860:	d009      	beq.n	8000876 <HAL_PCD_EP_Close+0x3e>
 8000862:	2301      	movs	r3, #1
 8000864:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000868:	6800      	ldr	r0, [r0, #0]
 800086a:	f001 fb4b 	bl	8001f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800086e:	2000      	movs	r0, #0
 8000870:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000874:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000876:	2002      	movs	r0, #2
}
 8000878:	bd10      	pop	{r4, pc}

0800087a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800087a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800087c:	2600      	movs	r6, #0
 800087e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000882:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000884:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000886:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800088a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800088e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000890:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000894:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000898:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800089c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 80008a0:	6800      	ldr	r0, [r0, #0]
 80008a2:	f001 fc93 	bl	80021cc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008a6:	4630      	mov	r0, r6
 80008a8:	bd70      	pop	{r4, r5, r6, pc}

080008aa <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80008aa:	f001 010f 	and.w	r1, r1, #15
 80008ae:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 80008b2:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 80008b6:	4770      	bx	lr

080008b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80008b8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80008c0:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 80008c2:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 80008c4:	2600      	movs	r6, #0
  ep->is_in = 1U;
 80008c6:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 80008c8:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008cc:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80008d0:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 80008d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 80008d4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80008d6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 80008da:	6800      	ldr	r0, [r0, #0]
 80008dc:	f001 fc76 	bl	80021cc <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80008e0:	4630      	mov	r0, r6
 80008e2:	bd70      	pop	{r4, r5, r6, pc}

080008e4 <HAL_PCD_IRQHandler>:
{ 
 80008e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80008e8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80008ea:	6800      	ldr	r0, [r0, #0]
 80008ec:	f001 fc56 	bl	800219c <USB_ReadInterrupts>
 80008f0:	0400      	lsls	r0, r0, #16
 80008f2:	f100 8098 	bmi.w	8000a26 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80008f6:	6820      	ldr	r0, [r4, #0]
 80008f8:	f001 fc50 	bl	800219c <USB_ReadInterrupts>
 80008fc:	0541      	lsls	r1, r0, #21
 80008fe:	d50f      	bpl.n	8000920 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000900:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000902:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000904:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800090c:	041b      	lsls	r3, r3, #16
 800090e:	0c1b      	lsrs	r3, r3, #16
 8000910:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000914:	f002 fc91 	bl	800323a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000918:	2100      	movs	r1, #0
 800091a:	4620      	mov	r0, r4
 800091c:	f7ff ff55 	bl	80007ca <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000920:	6820      	ldr	r0, [r4, #0]
 8000922:	f001 fc3b 	bl	800219c <USB_ReadInterrupts>
 8000926:	0447      	lsls	r7, r0, #17
 8000928:	d508      	bpl.n	800093c <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800092a:	6822      	ldr	r2, [r4, #0]
 800092c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	0c1b      	lsrs	r3, r3, #16
 8000938:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	f001 fc2d 	bl	800219c <USB_ReadInterrupts>
 8000942:	0486      	lsls	r6, r0, #18
 8000944:	d508      	bpl.n	8000958 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800094c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000958:	6820      	ldr	r0, [r4, #0]
 800095a:	f001 fc1f 	bl	800219c <USB_ReadInterrupts>
 800095e:	04c5      	lsls	r5, r0, #19
 8000960:	d51c      	bpl.n	800099c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000962:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000964:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000966:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800096a:	f023 0304 	bic.w	r3, r3, #4
 800096e:	041b      	lsls	r3, r3, #16
 8000970:	0c1b      	lsrs	r3, r3, #16
 8000972:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000976:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800097a:	f023 0308 	bic.w	r3, r3, #8
 800097e:	041b      	lsls	r3, r3, #16
 8000980:	0c1b      	lsrs	r3, r3, #16
 8000982:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000986:	f002 fc75 	bl	8003274 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800098a:	6822      	ldr	r2, [r4, #0]
 800098c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000994:	041b      	lsls	r3, r3, #16
 8000996:	0c1b      	lsrs	r3, r3, #16
 8000998:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800099c:	6820      	ldr	r0, [r4, #0]
 800099e:	f001 fbfd 	bl	800219c <USB_ReadInterrupts>
 80009a2:	0500      	lsls	r0, r0, #20
 80009a4:	d51d      	bpl.n	80009e2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80009a6:	6820      	ldr	r0, [r4, #0]
 80009a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80009b6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80009ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009be:	041b      	lsls	r3, r3, #16
 80009c0:	0c1b      	lsrs	r3, r3, #16
 80009c2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80009c6:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 80009d4:	f001 fbe2 	bl	800219c <USB_ReadInterrupts>
 80009d8:	04c1      	lsls	r1, r0, #19
 80009da:	d402      	bmi.n	80009e2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 80009dc:	4620      	mov	r0, r4
 80009de:	f002 fc39 	bl	8003254 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80009e2:	6820      	ldr	r0, [r4, #0]
 80009e4:	f001 fbda 	bl	800219c <USB_ReadInterrupts>
 80009e8:	0582      	lsls	r2, r0, #22
 80009ea:	d50b      	bpl.n	8000a04 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80009ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80009f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80009f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009f8:	041b      	lsls	r3, r3, #16
 80009fa:	0c1b      	lsrs	r3, r3, #16
 80009fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000a00:	f002 fc17 	bl	8003232 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000a04:	6820      	ldr	r0, [r4, #0]
 8000a06:	f001 fbc9 	bl	800219c <USB_ReadInterrupts>
 8000a0a:	05c3      	lsls	r3, r0, #23
 8000a0c:	d508      	bpl.n	8000a20 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a18:	041b      	lsls	r3, r3, #16
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000a20:	b002      	add	sp, #8
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000a26:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a28:	4fc8      	ldr	r7, [pc, #800]	; (8000d4c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000a2a:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000d50 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000a2e:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000d54 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 8000a32:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000a36:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000a46:	041b      	lsls	r3, r3, #16
 8000a48:	f57f af55 	bpl.w	80008f6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000a4c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000a50:	f015 050f 	ands.w	r5, r5, #15
 8000a54:	f040 80ab 	bne.w	8000bae <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a58:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a5c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a5e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a62:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000a64:	d126      	bne.n	8000ab4 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000a66:	403b      	ands	r3, r7
 8000a68:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a6a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a6e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000a7c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000a80:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a86:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000a88:	4413      	add	r3, r2
 8000a8a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f002 fbc9 	bl	8003224 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000a92:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0cf      	beq.n	8000a3a <HAL_PCD_IRQHandler+0x156>
 8000a9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	d1cc      	bne.n	8000a3a <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000aa0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000aa4:	6821      	ldr	r1, [r4, #0]
 8000aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aaa:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000aae:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000ab2:	e7c2      	b.n	8000a3a <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000ab8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000abc:	051a      	lsls	r2, r3, #20
 8000abe:	d51f      	bpl.n	8000b00 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ac0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ac4:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000ace:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ad2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000ad6:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ade:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000ae2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000ae6:	f001 fc71 	bl	80023cc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000aea:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000aec:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000aee:	8813      	ldrh	r3, [r2, #0]
 8000af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000af4:	051b      	lsls	r3, r3, #20
 8000af6:	0d1b      	lsrs	r3, r3, #20
 8000af8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000afa:	f002 fb85 	bl	8003208 <HAL_PCD_SetupStageCallback>
 8000afe:	e79c      	b.n	8000a3a <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000b00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	d598      	bpl.n	8000a3a <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000b08:	8803      	ldrh	r3, [r0, #0]
 8000b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b0e:	051b      	lsls	r3, r3, #20
 8000b10:	0d1b      	lsrs	r3, r3, #20
 8000b12:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000b14:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b18:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000b22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8000b2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b2e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8000b32:	b163      	cbz	r3, 8000b4e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000b34:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8000b38:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8000b3c:	f001 fc46 	bl	80023cc <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000b40:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000b44:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000b48:	4413      	add	r3, r2
 8000b4a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4620      	mov	r0, r4
 8000b52:	f002 fb5f 	bl	8003214 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b56:	6822      	ldr	r2, [r4, #0]
 8000b58:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8000b5c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000b60:	2d3e      	cmp	r5, #62	; 0x3e
 8000b62:	b289      	uxth	r1, r1
 8000b64:	f101 0106 	add.w	r1, r1, #6
 8000b68:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000b6c:	d917      	bls.n	8000b9e <HAL_PCD_IRQHandler+0x2ba>
 8000b6e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000b72:	06ee      	lsls	r6, r5, #27
 8000b74:	bf04      	itt	eq
 8000b76:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000b7a:	b29b      	uxtheq	r3, r3
 8000b7c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000b86:	8813      	ldrh	r3, [r2, #0]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	ea03 0308 	and.w	r3, r3, r8
 8000b8e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9a:	8013      	strh	r3, [r2, #0]
 8000b9c:	e74d      	b.n	8000a3a <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000b9e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000ba2:	07ed      	lsls	r5, r5, #31
 8000ba4:	bf44      	itt	mi
 8000ba6:	3301      	addmi	r3, #1
 8000ba8:	b29b      	uxthmi	r3, r3
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	e7e8      	b.n	8000b80 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000bae:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000bb8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000bbc:	0419      	lsls	r1, r3, #16
 8000bbe:	d53f      	bpl.n	8000c40 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000bc0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bc4:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	0d1b      	lsrs	r3, r3, #20
 8000bd0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000bd4:	eb04 010a 	add.w	r1, r4, sl
 8000bd8:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d174      	bne.n	8000cca <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000be0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000be4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3306      	adds	r3, #6
 8000bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bf0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bf4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000bf8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8000bfc:	b136      	cbz	r6, 8000c0c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000bfe:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8000c02:	4633      	mov	r3, r6
 8000c04:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000c08:	f001 fbe0 	bl	80023cc <USB_ReadPMA>
 8000c0c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8000c10:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8000c14:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8000c18:	4433      	add	r3, r6
 8000c1a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c1e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8000c22:	4432      	add	r2, r6
 8000c24:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000c28:	b123      	cbz	r3, 8000c34 <HAL_PCD_IRQHandler+0x350>
 8000c2a:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8000c2e:	4286      	cmp	r6, r0
 8000c30:	f080 8086 	bcs.w	8000d40 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000c34:	44a2      	add	sl, r4
 8000c36:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f002 faea 	bl	8003214 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000c40:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000c44:	061a      	lsls	r2, r3, #24
 8000c46:	f57f aef8 	bpl.w	8000a3a <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c4a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000c4c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c4e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c52:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	403b      	ands	r3, r7
 8000c58:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000c5c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000c60:	3502      	adds	r5, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d178      	bne.n	8000d58 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c6a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	3302      	adds	r3, #2
 8000c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c76:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c7a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000c7e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000c88:	b11b      	cbz	r3, 8000c92 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000c8a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000c8c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000c8e:	f001 fa8b 	bl	80021a8 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000c92:	6822      	ldr	r2, [r4, #0]
 8000c94:	4426      	add	r6, r4
 8000c96:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000c9a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000ca6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000caa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000cae:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000cb0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000cb4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000cb6:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000cb8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000cba:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000cbc:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8085 	bne.w	8000dce <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000cc4:	f002 faae 	bl	8003224 <HAL_PCD_DataInStageCallback>
 8000cc8:	e6b7      	b.n	8000a3a <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cca:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000cce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000cd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000cdc:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000cde:	d021      	beq.n	8000d24 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ce0:	3202      	adds	r2, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ce8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000cec:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000cf0:	b136      	cbz	r6, 8000d00 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000cf2:	4633      	mov	r3, r6
 8000cf4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000cf8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000cfc:	f001 fb66 	bl	80023cc <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000d00:	eb04 030a 	add.w	r3, r4, sl
 8000d04:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000d08:	6822      	ldr	r2, [r4, #0]
 8000d0a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	0d1b      	lsrs	r3, r3, #20
 8000d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d1e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000d22:	e773      	b.n	8000c0c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000d24:	3206      	adds	r2, #6
 8000d26:	4413      	add	r3, r2
 8000d28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d2c:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000d30:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d0e3      	beq.n	8000d00 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d38:	4633      	mov	r3, r6
 8000d3a:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000d3e:	e7db      	b.n	8000cf8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000d40:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fd98 	bl	800087a <HAL_PCD_EP_Receive>
 8000d4a:	e779      	b.n	8000c40 <HAL_PCD_IRQHandler+0x35c>
 8000d4c:	ffff8f0f 	.word	0xffff8f0f
 8000d50:	ffffbf8f 	.word	0xffffbf8f
 8000d54:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d58:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000d5c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d66:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000d6a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000d6c:	d020      	beq.n	8000db0 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000d6e:	3202      	adds	r2, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000d76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000d7a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d82:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000d84:	b11b      	cbz	r3, 8000d8e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000d86:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000d88:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000d8a:	f001 fa0d 	bl	80021a8 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000d8e:	19a3      	adds	r3, r4, r6
 8000d90:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000d94:	6822      	ldr	r2, [r4, #0]
 8000d96:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d9e:	051b      	lsls	r3, r3, #20
 8000da0:	0d1b      	lsrs	r3, r3, #20
 8000da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000dae:	e770      	b.n	8000c92 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000db0:	3206      	adds	r2, #6
 8000db2:	4413      	add	r3, r2
 8000db4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000db8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000dbc:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000dc4:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0e1      	beq.n	8000d8e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000dca:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000dcc:	e7dc      	b.n	8000d88 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000dce:	f7ff fd73 	bl	80008b8 <HAL_PCD_EP_Transmit>
 8000dd2:	e632      	b.n	8000a3a <HAL_PCD_IRQHandler+0x156>

08000dd4 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000dd4:	2201      	movs	r2, #1
{
 8000dd6:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000dd8:	b24b      	sxtb	r3, r1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000de0:	bfb5      	itete	lt
 8000de2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000de6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000dea:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000dec:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000df0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000df2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000df4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000df6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000df8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000dfa:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000dfe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00e      	beq.n	8000e22 <HAL_PCD_EP_SetStall+0x4e>
 8000e04:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000e08:	6800      	ldr	r0, [r0, #0]
 8000e0a:	f001 f949 	bl	80020a0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000e0e:	b925      	cbnz	r5, 8000e1a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000e10:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000e14:	6820      	ldr	r0, [r4, #0]
 8000e16:	f001 f9c5 	bl	80021a4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000e22:	2002      	movs	r0, #2
}
 8000e24:	bd38      	pop	{r3, r4, r5, pc}

08000e26 <HAL_PCD_EP_ClrStall>:
{
 8000e26:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000e28:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000e2a:	b24b      	sxtb	r3, r1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e32:	bfb5      	itete	lt
 8000e34:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000e38:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e3c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e3e:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e42:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000e44:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000e46:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000e48:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000e4a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000e4e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d009      	beq.n	8000e68 <HAL_PCD_EP_ClrStall+0x42>
 8000e54:	2301      	movs	r3, #1
 8000e56:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000e5a:	6800      	ldr	r0, [r0, #0]
 8000e5c:	f001 f952 	bl	8002104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000e60:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000e64:	4620      	mov	r0, r4
 8000e66:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000e68:	2002      	movs	r0, #2
}
 8000e6a:	bd38      	pop	{r3, r4, r5, pc}

08000e6c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000e6c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e70:	bf1b      	ittet	ne
 8000e72:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000e76:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000e7a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000e7e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000e80:	bf08      	it	eq
 8000e82:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000e86:	b91a      	cbnz	r2, 8000e90 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000e88:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000e8a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000e90:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000e92:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e94:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000e96:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000e98:	8103      	strh	r3, [r0, #8]
 8000e9a:	e7f7      	b.n	8000e8c <HAL_PCDEx_PMAConfig+0x20>

08000e9c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9c:	6803      	ldr	r3, [r0, #0]
{
 8000e9e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	07db      	lsls	r3, r3, #31
{
 8000ea4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea6:	d410      	bmi.n	8000eca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea8:	682b      	ldr	r3, [r5, #0]
 8000eaa:	079f      	lsls	r7, r3, #30
 8000eac:	d45e      	bmi.n	8000f6c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eae:	682b      	ldr	r3, [r5, #0]
 8000eb0:	0719      	lsls	r1, r3, #28
 8000eb2:	f100 8095 	bmi.w	8000fe0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	075a      	lsls	r2, r3, #29
 8000eba:	f100 80bf 	bmi.w	800103c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ebe:	69ea      	ldr	r2, [r5, #28]
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	f040 812d 	bne.w	8001120 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e014      	b.n	8000ef4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eca:	4c90      	ldr	r4, [pc, #576]	; (800110c <HAL_RCC_OscConfig+0x270>)
 8000ecc:	6863      	ldr	r3, [r4, #4]
 8000ece:	f003 030c 	and.w	r3, r3, #12
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d007      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed6:	6863      	ldr	r3, [r4, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0x5e>
 8000ee0:	6863      	ldr	r3, [r4, #4]
 8000ee2:	03de      	lsls	r6, r3, #15
 8000ee4:	d509      	bpl.n	8000efa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	039c      	lsls	r4, r3, #14
 8000eea:	d5dd      	bpl.n	8000ea8 <HAL_RCC_OscConfig+0xc>
 8000eec:	686b      	ldr	r3, [r5, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1da      	bne.n	8000ea8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000ef2:	2001      	movs	r0, #1
}
 8000ef4:	b002      	add	sp, #8
 8000ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000efa:	686b      	ldr	r3, [r5, #4]
 8000efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f00:	d110      	bne.n	8000f24 <HAL_RCC_OscConfig+0x88>
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f0a:	f7ff f961 	bl	80001d0 <HAL_GetTick>
 8000f0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	0398      	lsls	r0, r3, #14
 8000f14:	d4c8      	bmi.n	8000ea8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f16:	f7ff f95b 	bl	80001d0 <HAL_GetTick>
 8000f1a:	1b80      	subs	r0, r0, r6
 8000f1c:	2864      	cmp	r0, #100	; 0x64
 8000f1e:	d9f7      	bls.n	8000f10 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000f20:	2003      	movs	r0, #3
 8000f22:	e7e7      	b.n	8000ef4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	b99b      	cbnz	r3, 8000f4e <HAL_RCC_OscConfig+0xb2>
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f36:	f7ff f94b 	bl	80001d0 <HAL_GetTick>
 8000f3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	0399      	lsls	r1, r3, #14
 8000f40:	d5b2      	bpl.n	8000ea8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f42:	f7ff f945 	bl	80001d0 <HAL_GetTick>
 8000f46:	1b80      	subs	r0, r0, r6
 8000f48:	2864      	cmp	r0, #100	; 0x64
 8000f4a:	d9f7      	bls.n	8000f3c <HAL_RCC_OscConfig+0xa0>
 8000f4c:	e7e8      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	d103      	bne.n	8000f5e <HAL_RCC_OscConfig+0xc2>
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	e7d1      	b.n	8000f02 <HAL_RCC_OscConfig+0x66>
 8000f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f62:	6023      	str	r3, [r4, #0]
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	e7cd      	b.n	8000f08 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f6c:	4c67      	ldr	r4, [pc, #412]	; (800110c <HAL_RCC_OscConfig+0x270>)
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	f013 0f0c 	tst.w	r3, #12
 8000f74:	d007      	beq.n	8000f86 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f76:	6863      	ldr	r3, [r4, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d110      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x106>
 8000f80:	6863      	ldr	r3, [r4, #4]
 8000f82:	03da      	lsls	r2, r3, #15
 8000f84:	d40d      	bmi.n	8000fa2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f86:	6823      	ldr	r3, [r4, #0]
 8000f88:	079b      	lsls	r3, r3, #30
 8000f8a:	d502      	bpl.n	8000f92 <HAL_RCC_OscConfig+0xf6>
 8000f8c:	692b      	ldr	r3, [r5, #16]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d1af      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f92:	6823      	ldr	r3, [r4, #0]
 8000f94:	696a      	ldr	r2, [r5, #20]
 8000f96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	e785      	b.n	8000eae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa2:	692a      	ldr	r2, [r5, #16]
 8000fa4:	4b5a      	ldr	r3, [pc, #360]	; (8001110 <HAL_RCC_OscConfig+0x274>)
 8000fa6:	b16a      	cbz	r2, 8000fc4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fac:	f7ff f910 	bl	80001d0 <HAL_GetTick>
 8000fb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	079f      	lsls	r7, r3, #30
 8000fb6:	d4ec      	bmi.n	8000f92 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb8:	f7ff f90a 	bl	80001d0 <HAL_GetTick>
 8000fbc:	1b80      	subs	r0, r0, r6
 8000fbe:	2802      	cmp	r0, #2
 8000fc0:	d9f7      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x116>
 8000fc2:	e7ad      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000fc6:	f7ff f903 	bl	80001d0 <HAL_GetTick>
 8000fca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	0798      	lsls	r0, r3, #30
 8000fd0:	f57f af6d 	bpl.w	8000eae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd4:	f7ff f8fc 	bl	80001d0 <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d9f6      	bls.n	8000fcc <HAL_RCC_OscConfig+0x130>
 8000fde:	e79f      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe0:	69aa      	ldr	r2, [r5, #24]
 8000fe2:	4c4a      	ldr	r4, [pc, #296]	; (800110c <HAL_RCC_OscConfig+0x270>)
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_RCC_OscConfig+0x278>)
 8000fe6:	b1da      	cbz	r2, 8001020 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fec:	f7ff f8f0 	bl	80001d0 <HAL_GetTick>
 8000ff0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ff4:	079b      	lsls	r3, r3, #30
 8000ff6:	d50d      	bpl.n	8001014 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ff8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ffc:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	fbb3 f3f2 	udiv	r3, r3, r2
 8001004:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001006:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	9201      	str	r2, [sp, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_RCC_OscConfig+0x16a>
 8001012:	e750      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001014:	f7ff f8dc 	bl	80001d0 <HAL_GetTick>
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	2802      	cmp	r0, #2
 800101c:	d9e9      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x156>
 800101e:	e77f      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001020:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001022:	f7ff f8d5 	bl	80001d0 <HAL_GetTick>
 8001026:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800102a:	079f      	lsls	r7, r3, #30
 800102c:	f57f af43 	bpl.w	8000eb6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001030:	f7ff f8ce 	bl	80001d0 <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	2802      	cmp	r0, #2
 8001038:	d9f6      	bls.n	8001028 <HAL_RCC_OscConfig+0x18c>
 800103a:	e771      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800103c:	4c33      	ldr	r4, [pc, #204]	; (800110c <HAL_RCC_OscConfig+0x270>)
 800103e:	69e3      	ldr	r3, [r4, #28]
 8001040:	00d8      	lsls	r0, r3, #3
 8001042:	d424      	bmi.n	800108e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001044:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	69e3      	ldr	r3, [r4, #28]
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	61e3      	str	r3, [r4, #28]
 800104e:	69e3      	ldr	r3, [r4, #28]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4e30      	ldr	r6, [pc, #192]	; (800111c <HAL_RCC_OscConfig+0x280>)
 800105a:	6833      	ldr	r3, [r6, #0]
 800105c:	05d9      	lsls	r1, r3, #23
 800105e:	d518      	bpl.n	8001092 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001060:	68eb      	ldr	r3, [r5, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d126      	bne.n	80010b4 <HAL_RCC_OscConfig+0x218>
 8001066:	6a23      	ldr	r3, [r4, #32]
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800106e:	f7ff f8af 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001072:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001076:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	6a23      	ldr	r3, [r4, #32]
 800107a:	079b      	lsls	r3, r3, #30
 800107c:	d53f      	bpl.n	80010fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800107e:	2f00      	cmp	r7, #0
 8001080:	f43f af1d 	beq.w	8000ebe <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001084:	69e3      	ldr	r3, [r4, #28]
 8001086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800108a:	61e3      	str	r3, [r4, #28]
 800108c:	e717      	b.n	8000ebe <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800108e:	2700      	movs	r7, #0
 8001090:	e7e2      	b.n	8001058 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001092:	6833      	ldr	r3, [r6, #0]
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800109a:	f7ff f899 	bl	80001d0 <HAL_GetTick>
 800109e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a0:	6833      	ldr	r3, [r6, #0]
 80010a2:	05da      	lsls	r2, r3, #23
 80010a4:	d4dc      	bmi.n	8001060 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010a6:	f7ff f893 	bl	80001d0 <HAL_GetTick>
 80010aa:	eba0 0008 	sub.w	r0, r0, r8
 80010ae:	2864      	cmp	r0, #100	; 0x64
 80010b0:	d9f6      	bls.n	80010a0 <HAL_RCC_OscConfig+0x204>
 80010b2:	e735      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	b9ab      	cbnz	r3, 80010e2 <HAL_RCC_OscConfig+0x246>
 80010b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6223      	str	r3, [r4, #32]
 80010c2:	6a23      	ldr	r3, [r4, #32]
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80010ca:	f7ff f881 	bl	80001d0 <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d0:	6a23      	ldr	r3, [r4, #32]
 80010d2:	0798      	lsls	r0, r3, #30
 80010d4:	d5d3      	bpl.n	800107e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff f87b 	bl	80001d0 <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	4540      	cmp	r0, r8
 80010de:	d9f7      	bls.n	80010d0 <HAL_RCC_OscConfig+0x234>
 80010e0:	e71e      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e2:	2b05      	cmp	r3, #5
 80010e4:	6a23      	ldr	r3, [r4, #32]
 80010e6:	d103      	bne.n	80010f0 <HAL_RCC_OscConfig+0x254>
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6223      	str	r3, [r4, #32]
 80010ee:	e7ba      	b.n	8001066 <HAL_RCC_OscConfig+0x1ca>
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6223      	str	r3, [r4, #32]
 80010f6:	6a23      	ldr	r3, [r4, #32]
 80010f8:	f023 0304 	bic.w	r3, r3, #4
 80010fc:	e7b6      	b.n	800106c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff f867 	bl	80001d0 <HAL_GetTick>
 8001102:	eba0 0008 	sub.w	r0, r0, r8
 8001106:	42b0      	cmp	r0, r6
 8001108:	d9b6      	bls.n	8001078 <HAL_RCC_OscConfig+0x1dc>
 800110a:	e709      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
 800110c:	40021000 	.word	0x40021000
 8001110:	42420000 	.word	0x42420000
 8001114:	42420480 	.word	0x42420480
 8001118:	20000118 	.word	0x20000118
 800111c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001120:	4c22      	ldr	r4, [pc, #136]	; (80011ac <HAL_RCC_OscConfig+0x310>)
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	2b08      	cmp	r3, #8
 800112a:	f43f aee2 	beq.w	8000ef2 <HAL_RCC_OscConfig+0x56>
 800112e:	2300      	movs	r3, #0
 8001130:	4e1f      	ldr	r6, [pc, #124]	; (80011b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001132:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001134:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001136:	d12b      	bne.n	8001190 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001138:	f7ff f84a 	bl	80001d0 <HAL_GetTick>
 800113c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	0199      	lsls	r1, r3, #6
 8001142:	d41f      	bmi.n	8001184 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001144:	6a2b      	ldr	r3, [r5, #32]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d105      	bne.n	8001158 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114c:	6862      	ldr	r2, [r4, #4]
 800114e:	68a9      	ldr	r1, [r5, #8]
 8001150:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001154:	430a      	orrs	r2, r1
 8001156:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	430b      	orrs	r3, r1
 800115e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001162:	4313      	orrs	r3, r2
 8001164:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001166:	2301      	movs	r3, #1
 8001168:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800116a:	f7ff f831 	bl	80001d0 <HAL_GetTick>
 800116e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	019a      	lsls	r2, r3, #6
 8001174:	f53f aea7 	bmi.w	8000ec6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001178:	f7ff f82a 	bl	80001d0 <HAL_GetTick>
 800117c:	1b40      	subs	r0, r0, r5
 800117e:	2802      	cmp	r0, #2
 8001180:	d9f6      	bls.n	8001170 <HAL_RCC_OscConfig+0x2d4>
 8001182:	e6cd      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001184:	f7ff f824 	bl	80001d0 <HAL_GetTick>
 8001188:	1bc0      	subs	r0, r0, r7
 800118a:	2802      	cmp	r0, #2
 800118c:	d9d7      	bls.n	800113e <HAL_RCC_OscConfig+0x2a2>
 800118e:	e6c7      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001190:	f7ff f81e 	bl	80001d0 <HAL_GetTick>
 8001194:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	f57f ae94 	bpl.w	8000ec6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119e:	f7ff f817 	bl	80001d0 <HAL_GetTick>
 80011a2:	1b40      	subs	r0, r0, r5
 80011a4:	2802      	cmp	r0, #2
 80011a6:	d9f6      	bls.n	8001196 <HAL_RCC_OscConfig+0x2fa>
 80011a8:	e6ba      	b.n	8000f20 <HAL_RCC_OscConfig+0x84>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	42420060 	.word	0x42420060

080011b4 <HAL_RCC_GetSysClockFreq>:
{
 80011b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80011b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011ba:	ac02      	add	r4, sp, #8
 80011bc:	f103 0510 	add.w	r5, r3, #16
 80011c0:	4622      	mov	r2, r4
 80011c2:	6818      	ldr	r0, [r3, #0]
 80011c4:	6859      	ldr	r1, [r3, #4]
 80011c6:	3308      	adds	r3, #8
 80011c8:	c203      	stmia	r2!, {r0, r1}
 80011ca:	42ab      	cmp	r3, r5
 80011cc:	4614      	mov	r4, r2
 80011ce:	d1f7      	bne.n	80011c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011d0:	2301      	movs	r3, #1
 80011d2:	f88d 3004 	strb.w	r3, [sp, #4]
 80011d6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80011d8:	4911      	ldr	r1, [pc, #68]	; (8001220 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011da:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80011de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011e0:	f003 020c 	and.w	r2, r3, #12
 80011e4:	2a08      	cmp	r2, #8
 80011e6:	d117      	bne.n	8001218 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011ec:	a806      	add	r0, sp, #24
 80011ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011f6:	d50c      	bpl.n	8001212 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011fa:	480a      	ldr	r0, [pc, #40]	; (8001224 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001200:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001202:	aa06      	add	r2, sp, #24
 8001204:	4413      	add	r3, r2
 8001206:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800120a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800120e:	b007      	add	sp, #28
 8001210:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_RCC_GetSysClockFreq+0x74>)
 8001214:	4350      	muls	r0, r2
 8001216:	e7fa      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800121a:	e7f8      	b.n	800120e <HAL_RCC_GetSysClockFreq+0x5a>
 800121c:	0800357c 	.word	0x0800357c
 8001220:	40021000 	.word	0x40021000
 8001224:	007a1200 	.word	0x007a1200
 8001228:	003d0900 	.word	0x003d0900

0800122c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_RCC_ClockConfig+0x154>)
{
 800122e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001232:	6813      	ldr	r3, [r2, #0]
{
 8001234:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	428b      	cmp	r3, r1
{
 800123c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800123e:	d32a      	bcc.n	8001296 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	6829      	ldr	r1, [r5, #0]
 8001242:	078c      	lsls	r4, r1, #30
 8001244:	d434      	bmi.n	80012b0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001246:	07ca      	lsls	r2, r1, #31
 8001248:	d447      	bmi.n	80012da <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800124a:	4a4d      	ldr	r2, [pc, #308]	; (8001380 <HAL_RCC_ClockConfig+0x154>)
 800124c:	6813      	ldr	r3, [r2, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	429e      	cmp	r6, r3
 8001254:	f0c0 8082 	bcc.w	800135c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	682a      	ldr	r2, [r5, #0]
 800125a:	4c4a      	ldr	r4, [pc, #296]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 800125c:	f012 0f04 	tst.w	r2, #4
 8001260:	f040 8087 	bne.w	8001372 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	0713      	lsls	r3, r2, #28
 8001266:	d506      	bpl.n	8001276 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	692a      	ldr	r2, [r5, #16]
 800126c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001270:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001274:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001276:	f7ff ff9d 	bl	80011b4 <HAL_RCC_GetSysClockFreq>
 800127a:	6863      	ldr	r3, [r4, #4]
 800127c:	4a42      	ldr	r2, [pc, #264]	; (8001388 <HAL_RCC_ClockConfig+0x15c>)
 800127e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	40d8      	lsrs	r0, r3
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_ClockConfig+0x160>)
 8001288:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f7fe ff5e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
}
 8001292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001296:	6813      	ldr	r3, [r2, #0]
 8001298:	f023 0307 	bic.w	r3, r3, #7
 800129c:	430b      	orrs	r3, r1
 800129e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012a0:	6813      	ldr	r3, [r2, #0]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d0ca      	beq.n	8001240 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80012aa:	2001      	movs	r0, #1
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b6:	bf1e      	ittt	ne
 80012b8:	685a      	ldrne	r2, [r3, #4]
 80012ba:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80012be:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c2:	bf42      	ittt	mi
 80012c4:	685a      	ldrmi	r2, [r3, #4]
 80012c6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80012ca:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	68a8      	ldr	r0, [r5, #8]
 80012d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012d4:	4302      	orrs	r2, r0
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	e7b5      	b.n	8001246 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012da:	686a      	ldr	r2, [r5, #4]
 80012dc:	4c29      	ldr	r4, [pc, #164]	; (8001384 <HAL_RCC_ClockConfig+0x158>)
 80012de:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e2:	d11c      	bne.n	800131e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	d0df      	beq.n	80012aa <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ea:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f0:	f023 0303 	bic.w	r3, r3, #3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80012f8:	f7fe ff6a 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80012fe:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001300:	2b01      	cmp	r3, #1
 8001302:	d114      	bne.n	800132e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	6863      	ldr	r3, [r4, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b04      	cmp	r3, #4
 800130c:	d09d      	beq.n	800124a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130e:	f7fe ff5f 	bl	80001d0 <HAL_GetTick>
 8001312:	1bc0      	subs	r0, r0, r7
 8001314:	4540      	cmp	r0, r8
 8001316:	d9f5      	bls.n	8001304 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001318:	2003      	movs	r0, #3
 800131a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800131e:	2a02      	cmp	r2, #2
 8001320:	d102      	bne.n	8001328 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001322:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001326:	e7df      	b.n	80012e8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	f013 0f02 	tst.w	r3, #2
 800132c:	e7dc      	b.n	80012e8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800132e:	2b02      	cmp	r3, #2
 8001330:	d10f      	bne.n	8001352 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001332:	6863      	ldr	r3, [r4, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	2b08      	cmp	r3, #8
 800133a:	d086      	beq.n	800124a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133c:	f7fe ff48 	bl	80001d0 <HAL_GetTick>
 8001340:	1bc0      	subs	r0, r0, r7
 8001342:	4540      	cmp	r0, r8
 8001344:	d9f5      	bls.n	8001332 <HAL_RCC_ClockConfig+0x106>
 8001346:	e7e7      	b.n	8001318 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f7fe ff42 	bl	80001d0 <HAL_GetTick>
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	4540      	cmp	r0, r8
 8001350:	d8e2      	bhi.n	8001318 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	f013 0f0c 	tst.w	r3, #12
 8001358:	d1f6      	bne.n	8001348 <HAL_RCC_ClockConfig+0x11c>
 800135a:	e776      	b.n	800124a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135c:	6813      	ldr	r3, [r2, #0]
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	4333      	orrs	r3, r6
 8001364:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001366:	6813      	ldr	r3, [r2, #0]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	429e      	cmp	r6, r3
 800136e:	d19c      	bne.n	80012aa <HAL_RCC_ClockConfig+0x7e>
 8001370:	e772      	b.n	8001258 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	68e9      	ldr	r1, [r5, #12]
 8001376:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800137a:	430b      	orrs	r3, r1
 800137c:	6063      	str	r3, [r4, #4]
 800137e:	e771      	b.n	8001264 <HAL_RCC_ClockConfig+0x38>
 8001380:	40022000 	.word	0x40022000
 8001384:	40021000 	.word	0x40021000
 8001388:	0800358c 	.word	0x0800358c
 800138c:	20000118 	.word	0x20000118

08001390 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001390:	6803      	ldr	r3, [r0, #0]
{
 8001392:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001396:	07d9      	lsls	r1, r3, #31
{
 8001398:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800139a:	d520      	bpl.n	80013de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139c:	4c35      	ldr	r4, [pc, #212]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800139e:	69e3      	ldr	r3, [r4, #28]
 80013a0:	00da      	lsls	r2, r3, #3
 80013a2:	d432      	bmi.n	800140a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80013a4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	69e3      	ldr	r3, [r4, #28]
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	61e3      	str	r3, [r4, #28]
 80013ae:	69e3      	ldr	r3, [r4, #28]
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4e2f      	ldr	r6, [pc, #188]	; (8001478 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80013ba:	6833      	ldr	r3, [r6, #0]
 80013bc:	05db      	lsls	r3, r3, #23
 80013be:	d526      	bpl.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013c0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013c2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013c6:	d136      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013c8:	6a23      	ldr	r3, [r4, #32]
 80013ca:	686a      	ldr	r2, [r5, #4]
 80013cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d0:	4313      	orrs	r3, r2
 80013d2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d4:	b11f      	cbz	r7, 80013de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	69e3      	ldr	r3, [r4, #28]
 80013d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013de:	6828      	ldr	r0, [r5, #0]
 80013e0:	0783      	lsls	r3, r0, #30
 80013e2:	d506      	bpl.n	80013f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013e6:	68a9      	ldr	r1, [r5, #8]
 80013e8:	6853      	ldr	r3, [r2, #4]
 80013ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ee:	430b      	orrs	r3, r1
 80013f0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013f2:	f010 0010 	ands.w	r0, r0, #16
 80013f6:	d01b      	beq.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f8:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80013fa:	68e9      	ldr	r1, [r5, #12]
 80013fc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013fe:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001400:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001404:	430b      	orrs	r3, r1
 8001406:	6053      	str	r3, [r2, #4]
 8001408:	e012      	b.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2700      	movs	r7, #0
 800140c:	e7d4      	b.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	6833      	ldr	r3, [r6, #0]
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001416:	f7fe fedb 	bl	80001d0 <HAL_GetTick>
 800141a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	6833      	ldr	r3, [r6, #0]
 800141e:	05d8      	lsls	r0, r3, #23
 8001420:	d4ce      	bmi.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001422:	f7fe fed5 	bl	80001d0 <HAL_GetTick>
 8001426:	eba0 0008 	sub.w	r0, r0, r8
 800142a:	2864      	cmp	r0, #100	; 0x64
 800142c:	d9f6      	bls.n	800141c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800142e:	2003      	movs	r0, #3
}
 8001430:	b002      	add	sp, #8
 8001432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001436:	686a      	ldr	r2, [r5, #4]
 8001438:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800143c:	4293      	cmp	r3, r2
 800143e:	d0c3      	beq.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001440:	2001      	movs	r0, #1
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001444:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001446:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001448:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800144a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800144e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001450:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001452:	07d9      	lsls	r1, r3, #31
 8001454:	d5b8      	bpl.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001456:	f7fe febb 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800145e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	6a23      	ldr	r3, [r4, #32]
 8001462:	079a      	lsls	r2, r3, #30
 8001464:	d4b0      	bmi.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7fe feb3 	bl	80001d0 <HAL_GetTick>
 800146a:	1b80      	subs	r0, r0, r6
 800146c:	4540      	cmp	r0, r8
 800146e:	d9f7      	bls.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001470:	e7dd      	b.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	40007000 	.word	0x40007000
 800147c:	42420440 	.word	0x42420440

08001480 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001480:	6a03      	ldr	r3, [r0, #32]
{
 8001482:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800148a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800148c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800148e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001490:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001492:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001496:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001498:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800149a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800149e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80014a0:	4d0a      	ldr	r5, [pc, #40]	; (80014cc <TIM_OC1_SetConfig+0x4c>)
 80014a2:	42a8      	cmp	r0, r5
 80014a4:	d10b      	bne.n	80014be <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80014a8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80014ac:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80014ae:	698e      	ldr	r6, [r1, #24]
 80014b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80014b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80014b6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80014b8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80014bc:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80014c0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80014c2:	684a      	ldr	r2, [r1, #4]
 80014c4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014c6:	6203      	str	r3, [r0, #32]
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
 80014ca:	bf00      	nop
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014d0:	6a03      	ldr	r3, [r0, #32]
{
 80014d2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014da:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014dc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014de:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80014e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80014e6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014e8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80014ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80014ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80014f2:	4d0b      	ldr	r5, [pc, #44]	; (8001520 <TIM_OC3_SetConfig+0x50>)
 80014f4:	42a8      	cmp	r0, r5
 80014f6:	d10d      	bne.n	8001514 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014f8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80014fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001502:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001504:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001506:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800150a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800150c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001510:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001514:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001516:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001518:	684a      	ldr	r2, [r1, #4]
 800151a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800151c:	6203      	str	r3, [r0, #32]
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	40012c00 	.word	0x40012c00

08001524 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001524:	6a03      	ldr	r3, [r0, #32]
{
 8001526:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800152c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800152e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001530:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001532:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001534:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001536:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800153a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800153e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001544:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001548:	4d06      	ldr	r5, [pc, #24]	; (8001564 <TIM_OC4_SetConfig+0x40>)
 800154a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800154c:	bf02      	ittt	eq
 800154e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001550:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001554:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001558:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800155a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800155c:	684a      	ldr	r2, [r1, #4]
 800155e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001560:	6203      	str	r3, [r0, #32]
 8001562:	bd30      	pop	{r4, r5, pc}
 8001564:	40012c00 	.word	0x40012c00

08001568 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001568:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800156a:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800156c:	689a      	ldr	r2, [r3, #8]
{
 800156e:	b530      	push	{r4, r5, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 8001570:	f022 0270 	bic.w	r2, r2, #112	; 0x70

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001574:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001576:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001578:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800157c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800157e:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001580:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001582:	d021      	beq.n	80015c8 <TIM_SlaveTimer_SetConfig+0x60>
 8001584:	d802      	bhi.n	800158c <TIM_SlaveTimer_SetConfig+0x24>
 8001586:	2840      	cmp	r0, #64	; 0x40
 8001588:	d010      	beq.n	80015ac <TIM_SlaveTimer_SetConfig+0x44>
 800158a:	bd30      	pop	{r4, r5, pc}
 800158c:	2860      	cmp	r0, #96	; 0x60
 800158e:	d02d      	beq.n	80015ec <TIM_SlaveTimer_SetConfig+0x84>
 8001590:	2870      	cmp	r0, #112	; 0x70
 8001592:	d13d      	bne.n	8001610 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001594:	68ca      	ldr	r2, [r1, #12]
 8001596:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001598:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800159a:	6909      	ldr	r1, [r1, #16]
 800159c:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800159e:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015a6:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 80015ac:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80015ae:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80015b0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80015b8:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80015be:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80015c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80015c4:	6218      	str	r0, [r3, #32]
    break;
 80015c6:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80015c8:	6888      	ldr	r0, [r1, #8]
 80015ca:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80015cc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015ce:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015d0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015d4:	f024 0401 	bic.w	r4, r4, #1
 80015d8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015da:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80015dc:	4301      	orrs	r1, r0
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015e2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80015e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80015e8:	6219      	str	r1, [r3, #32]
 80015ea:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ec:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015ee:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015f0:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015f4:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015f6:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015f8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80015fa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015fc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001600:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001604:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001608:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800160c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	bd30      	pop	{r4, r5, pc}

08001612 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001612:	6803      	ldr	r3, [r0, #0]
}
 8001614:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001616:	68da      	ldr	r2, [r3, #12]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	601a      	str	r2, [r3, #0]
}
 8001626:	4770      	bx	lr

08001628 <HAL_TIM_PWM_MspInit>:
 8001628:	4770      	bx	lr

0800162a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800162a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800162e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001630:	2b01      	cmp	r3, #1
 8001632:	f04f 0302 	mov.w	r3, #2
 8001636:	d01c      	beq.n	8001672 <HAL_TIM_ConfigClockSource+0x48>
 8001638:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800163a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800163e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001640:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001644:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001646:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800164a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800164e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001650:	680a      	ldr	r2, [r1, #0]
 8001652:	2a40      	cmp	r2, #64	; 0x40
 8001654:	d079      	beq.n	800174a <HAL_TIM_ConfigClockSource+0x120>
 8001656:	d819      	bhi.n	800168c <HAL_TIM_ConfigClockSource+0x62>
 8001658:	2a10      	cmp	r2, #16
 800165a:	f000 8093 	beq.w	8001784 <HAL_TIM_ConfigClockSource+0x15a>
 800165e:	d80a      	bhi.n	8001676 <HAL_TIM_ConfigClockSource+0x4c>
 8001660:	2a00      	cmp	r2, #0
 8001662:	f000 8089 	beq.w	8001778 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001666:	2301      	movs	r3, #1
 8001668:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800166c:	2300      	movs	r3, #0
 800166e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001672:	4618      	mov	r0, r3
}
 8001674:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001676:	2a20      	cmp	r2, #32
 8001678:	f000 808a 	beq.w	8001790 <HAL_TIM_ConfigClockSource+0x166>
 800167c:	2a30      	cmp	r2, #48	; 0x30
 800167e:	d1f2      	bne.n	8001666 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001680:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001686:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800168a:	e036      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800168c:	2a70      	cmp	r2, #112	; 0x70
 800168e:	d036      	beq.n	80016fe <HAL_TIM_ConfigClockSource+0xd4>
 8001690:	d81b      	bhi.n	80016ca <HAL_TIM_ConfigClockSource+0xa0>
 8001692:	2a50      	cmp	r2, #80	; 0x50
 8001694:	d042      	beq.n	800171c <HAL_TIM_ConfigClockSource+0xf2>
 8001696:	2a60      	cmp	r2, #96	; 0x60
 8001698:	d1e5      	bne.n	8001666 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800169a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800169c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800169e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80016a2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016a4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016a6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80016a8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016aa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80016b2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016b6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80016ba:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80016bc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80016be:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80016c4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80016c8:	e017      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80016ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80016ce:	d011      	beq.n	80016f4 <HAL_TIM_ConfigClockSource+0xca>
 80016d0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80016d4:	d1c7      	bne.n	8001666 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016d6:	688a      	ldr	r2, [r1, #8]
 80016d8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80016da:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016dc:	68c9      	ldr	r1, [r1, #12]
 80016de:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016e0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80016e8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80016ea:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f2:	e002      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e7b3      	b.n	8001666 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016fe:	688a      	ldr	r2, [r1, #8]
 8001700:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001702:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001704:	68c9      	ldr	r1, [r1, #12]
 8001706:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001708:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800170c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001710:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001712:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001714:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001716:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800171a:	e7ee      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800171c:	684c      	ldr	r4, [r1, #4]
 800171e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001720:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001722:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001724:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001728:	f025 0501 	bic.w	r5, r5, #1
 800172c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800172e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001730:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001732:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001736:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800173a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800173c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800173e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001740:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001744:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001748:	e7d7      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800174a:	684c      	ldr	r4, [r1, #4]
 800174c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800174e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001750:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001752:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001756:	f025 0501 	bic.w	r5, r5, #1
 800175a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800175c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800175e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001760:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001764:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800176a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800176c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800176e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001772:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001776:	e7c0      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001778:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800177a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800177e:	f042 0207 	orr.w	r2, r2, #7
 8001782:	e7ba      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001784:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800178a:	f042 0217 	orr.w	r2, r2, #23
 800178e:	e7b4      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001790:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001792:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001796:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800179a:	e7ae      	b.n	80016fa <HAL_TIM_ConfigClockSource+0xd0>

0800179c <HAL_TIM_SlaveConfigSynchronization>:
{
 800179c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800179e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80017a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f04f 0302 	mov.w	r3, #2
 80017aa:	d015      	beq.n	80017d8 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 80017ac:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80017ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80017b2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80017b6:	f7ff fed7 	bl	8001568 <TIM_SlaveTimer_SetConfig>
  __HAL_UNLOCK(htim);
 80017ba:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017c4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017cc:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80017ce:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80017d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80017d8:	4618      	mov	r0, r3
    }
 80017da:	bd38      	pop	{r3, r4, r5, pc}

080017dc <HAL_TIM_OC_DelayElapsedCallback>:
 80017dc:	4770      	bx	lr

080017de <HAL_TIM_IC_CaptureCallback>:
 80017de:	4770      	bx	lr

080017e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017e0:	4770      	bx	lr

080017e2 <HAL_TIM_TriggerCallback>:
 80017e2:	4770      	bx	lr

080017e4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e4:	6803      	ldr	r3, [r0, #0]
{
 80017e6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017e8:	691a      	ldr	r2, [r3, #16]
{
 80017ea:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ec:	0791      	lsls	r1, r2, #30
 80017ee:	d50e      	bpl.n	800180e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	0792      	lsls	r2, r2, #30
 80017f4:	d50b      	bpl.n	800180e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017f6:	f06f 0202 	mvn.w	r2, #2
 80017fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017fc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001800:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001802:	079b      	lsls	r3, r3, #30
 8001804:	d077      	beq.n	80018f6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001806:	f7ff ffea 	bl	80017de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	2300      	movs	r3, #0
 800180c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	0750      	lsls	r0, r2, #29
 8001814:	d510      	bpl.n	8001838 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	0751      	lsls	r1, r2, #29
 800181a:	d50d      	bpl.n	8001838 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800181c:	f06f 0204 	mvn.w	r2, #4
 8001820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001822:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001824:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001826:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001828:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800182c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800182e:	d068      	beq.n	8001902 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001830:	f7ff ffd5 	bl	80017de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001834:	2300      	movs	r3, #0
 8001836:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	0712      	lsls	r2, r2, #28
 800183e:	d50f      	bpl.n	8001860 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	0710      	lsls	r0, r2, #28
 8001844:	d50c      	bpl.n	8001860 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001846:	f06f 0208 	mvn.w	r2, #8
 800184a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800184c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800184e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001850:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001852:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001854:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001856:	d05a      	beq.n	800190e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001858:	f7ff ffc1 	bl	80017de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185c:	2300      	movs	r3, #0
 800185e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	06d2      	lsls	r2, r2, #27
 8001866:	d510      	bpl.n	800188a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	06d0      	lsls	r0, r2, #27
 800186c:	d50d      	bpl.n	800188a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800186e:	f06f 0210 	mvn.w	r2, #16
 8001872:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001874:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001876:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001878:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800187a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800187e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001880:	d04b      	beq.n	800191a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001882:	f7ff ffac 	bl	80017de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001886:	2300      	movs	r3, #0
 8001888:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	07d1      	lsls	r1, r2, #31
 8001890:	d508      	bpl.n	80018a4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	07d2      	lsls	r2, r2, #31
 8001896:	d505      	bpl.n	80018a4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001898:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800189c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800189e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a0:	f001 fb22 	bl	8002ee8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	0610      	lsls	r0, r2, #24
 80018aa:	d508      	bpl.n	80018be <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	0611      	lsls	r1, r2, #24
 80018b0:	d505      	bpl.n	80018be <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80018b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80018ba:	f000 f978 	bl	8001bae <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	0652      	lsls	r2, r2, #25
 80018c4:	d508      	bpl.n	80018d8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	0650      	lsls	r0, r2, #25
 80018ca:	d505      	bpl.n	80018d8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80018d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018d4:	f7ff ff85 	bl	80017e2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	0691      	lsls	r1, r2, #26
 80018de:	d522      	bpl.n	8001926 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	0692      	lsls	r2, r2, #26
 80018e4:	d51f      	bpl.n	8001926 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80018ea:	4620      	mov	r0, r4
}
 80018ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80018f2:	f000 b95b 	b.w	8001bac <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f6:	f7ff ff71 	bl	80017dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff ff70 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001900:	e783      	b.n	800180a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	f7ff ff6b 	bl	80017dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001906:	4620      	mov	r0, r4
 8001908:	f7ff ff6a 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800190c:	e792      	b.n	8001834 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	f7ff ff65 	bl	80017dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff64 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001918:	e7a0      	b.n	800185c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800191a:	f7ff ff5f 	bl	80017dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff5e 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001924:	e7af      	b.n	8001886 <HAL_TIM_IRQHandler+0xa2>
 8001926:	bd10      	pop	{r4, pc}

08001928 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001928:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800192a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800192c:	4290      	cmp	r0, r2
 800192e:	d00a      	beq.n	8001946 <TIM_Base_SetConfig+0x1e>
 8001930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001934:	d007      	beq.n	8001946 <TIM_Base_SetConfig+0x1e>
 8001936:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800193a:	4290      	cmp	r0, r2
 800193c:	d003      	beq.n	8001946 <TIM_Base_SetConfig+0x1e>
 800193e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001942:	4290      	cmp	r0, r2
 8001944:	d115      	bne.n	8001972 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001946:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800194c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <TIM_Base_SetConfig+0x6c>)
 8001950:	4290      	cmp	r0, r2
 8001952:	d00a      	beq.n	800196a <TIM_Base_SetConfig+0x42>
 8001954:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001958:	d007      	beq.n	800196a <TIM_Base_SetConfig+0x42>
 800195a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800195e:	4290      	cmp	r0, r2
 8001960:	d003      	beq.n	800196a <TIM_Base_SetConfig+0x42>
 8001962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001966:	4290      	cmp	r0, r2
 8001968:	d103      	bne.n	8001972 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800196c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001970:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001972:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001978:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800197a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197c:	688b      	ldr	r3, [r1, #8]
 800197e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001980:	680b      	ldr	r3, [r1, #0]
 8001982:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <TIM_Base_SetConfig+0x6c>)
 8001986:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001988:	bf04      	itt	eq
 800198a:	690b      	ldreq	r3, [r1, #16]
 800198c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800198e:	2301      	movs	r3, #1
 8001990:	6143      	str	r3, [r0, #20]
 8001992:	4770      	bx	lr
 8001994:	40012c00 	.word	0x40012c00

08001998 <HAL_TIM_Base_Init>:
{
 8001998:	b510      	push	{r4, lr}
  if(htim == NULL)
 800199a:	4604      	mov	r4, r0
 800199c:	b1a0      	cbz	r0, 80019c8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800199e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019a6:	b91b      	cbnz	r3, 80019b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019ac:	f001 fb0c 	bl	8002fc8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80019b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b8:	1d21      	adds	r1, r4, #4
 80019ba:	f7ff ffb5 	bl	8001928 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019be:	2301      	movs	r3, #1
  return HAL_OK;
 80019c0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80019c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
}
 80019ca:	bd10      	pop	{r4, pc}

080019cc <HAL_TIM_PWM_Init>:
{
 80019cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80019ce:	4604      	mov	r4, r0
 80019d0:	b1a0      	cbz	r0, 80019fc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80019d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019da:	b91b      	cbnz	r3, 80019e4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019e0:	f7ff fe22 	bl	8001628 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80019e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019e6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80019e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ec:	1d21      	adds	r1, r4, #4
 80019ee:	f7ff ff9b 	bl	8001928 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80019f2:	2301      	movs	r3, #1
  return HAL_OK;
 80019f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80019f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019fc:	2001      	movs	r0, #1
}
 80019fe:	bd10      	pop	{r4, pc}

08001a00 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a00:	6a03      	ldr	r3, [r0, #32]
{
 8001a02:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a04:	f023 0310 	bic.w	r3, r3, #16
 8001a08:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a0a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001a0c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a0e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a1c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a20:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a24:	4d0b      	ldr	r5, [pc, #44]	; (8001a54 <TIM_OC2_SetConfig+0x54>)
 8001a26:	42a8      	cmp	r0, r5
 8001a28:	d10d      	bne.n	8001a46 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a2a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a30:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001a34:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001a36:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a38:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001a3c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001a42:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a46:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a48:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a4a:	684a      	ldr	r2, [r1, #4]
 8001a4c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a4e:	6203      	str	r3, [r0, #32]
 8001a50:	bd70      	pop	{r4, r5, r6, pc}
 8001a52:	bf00      	nop
 8001a54:	40012c00 	.word	0x40012c00

08001a58 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001a5e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	f04f 0002 	mov.w	r0, #2
 8001a66:	d025      	beq.n	8001ab4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001a68:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001a6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001a72:	2a0c      	cmp	r2, #12
 8001a74:	d818      	bhi.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001a76:	e8df f002 	tbb	[pc, r2]
 8001a7a:	1707      	.short	0x1707
 8001a7c:	171e1717 	.word	0x171e1717
 8001a80:	172f1717 	.word	0x172f1717
 8001a84:	1717      	.short	0x1717
 8001a86:	40          	.byte	0x40
 8001a87:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	f7ff fcf9 	bl	8001480 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a8e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	f042 0208 	orr.w	r2, r2, #8
 8001a98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a9a:	699a      	ldr	r2, [r3, #24]
 8001a9c:	f022 0204 	bic.w	r2, r2, #4
 8001aa0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001aa6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001aa8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001aaa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001aac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ab0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ab6:	6820      	ldr	r0, [r4, #0]
 8001ab8:	f7ff ffa2 	bl	8001a00 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001abc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001abe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001ad0:	699a      	ldr	r2, [r3, #24]
 8001ad2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ad6:	e7e6      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	f7ff fcf9 	bl	80014d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ade:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ae0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ae2:	69da      	ldr	r2, [r3, #28]
 8001ae4:	f042 0208 	orr.w	r2, r2, #8
 8001ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001af2:	69da      	ldr	r2, [r3, #28]
 8001af4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001af6:	61da      	str	r2, [r3, #28]
    break;
 8001af8:	e7d6      	b.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001afa:	6820      	ldr	r0, [r4, #0]
 8001afc:	f7ff fd12 	bl	8001524 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b00:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001b02:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b0c:	69da      	ldr	r2, [r3, #28]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b1a:	e7ec      	b.n	8001af6 <HAL_TIM_PWM_ConfigChannel+0x9e>

08001b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d01f      	beq.n	8001b64 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001b24:	68cb      	ldr	r3, [r1, #12]
 8001b26:	688a      	ldr	r2, [r1, #8]
 8001b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001b2e:	684a      	ldr	r2, [r1, #4]
 8001b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001b36:	680a      	ldr	r2, [r1, #0]
 8001b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001b3e:	690a      	ldr	r2, [r1, #16]
 8001b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b44:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001b46:	694a      	ldr	r2, [r1, #20]
 8001b48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b4e:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b54:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001b56:	6802      	ldr	r2, [r0, #0]
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001b60:	4618      	mov	r0, r3
 8001b62:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001b64:	2002      	movs	r0, #2
}
 8001b66:	4770      	bx	lr

08001b68 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001b68:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b6c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	f04f 0302 	mov.w	r3, #2
 8001b74:	d018      	beq.n	8001ba8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001b76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b7a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001b7c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b7e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b80:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001b82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b86:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	4322      	orrs	r2, r4
 8001b8c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b94:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001ba8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001baa:	bd10      	pop	{r4, pc}

08001bac <HAL_TIMEx_CommutationCallback>:
 8001bac:	4770      	bx	lr

08001bae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bae:	4770      	bx	lr

08001bb0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	a801      	add	r0, sp, #4
 8001bb4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001bb8:	b004      	add	sp, #16
 8001bba:	2000      	movs	r0, #0
 8001bbc:	4770      	bx	lr

08001bbe <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001bbe:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001bc8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4770      	bx	lr

08001bd0 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001bd0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001bd4:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001bd8:	045b      	lsls	r3, r3, #17
 8001bda:	0c5b      	lsrs	r3, r3, #17
 8001bdc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001be0:	2000      	movs	r0, #0
 8001be2:	4770      	bx	lr

08001be4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001be4:	2000      	movs	r0, #0
 8001be6:	4770      	bx	lr

08001be8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001be8:	b084      	sub	sp, #16
 8001bea:	b510      	push	{r4, lr}
 8001bec:	ac03      	add	r4, sp, #12
 8001bee:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001bf6:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8001bfe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001c02:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001c06:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8001c0a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8001c0e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001c16:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4770      	bx	lr
	...

08001c20 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001c22:	78cb      	ldrb	r3, [r1, #3]
 8001c24:	780a      	ldrb	r2, [r1, #0]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d80f      	bhi.n	8001c4a <USB_ActivateEndpoint+0x2a>
 8001c2a:	e8df f003 	tbb	[pc, r3]
 8001c2e:	6402      	.short	0x6402
 8001c30:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001c32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001c36:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3e:	041b      	lsls	r3, r3, #16
 8001c40:	0c1b      	lsrs	r3, r3, #16
 8001c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001c46:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001c4a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8001c4e:	780c      	ldrb	r4, [r1, #0]
 8001c50:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c54:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 8001c58:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	432a      	orrs	r2, r5
 8001c60:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001c64:	7a8a      	ldrb	r2, [r1, #10]
 8001c66:	780d      	ldrb	r5, [r1, #0]
 8001c68:	2a00      	cmp	r2, #0
 8001c6a:	f040 8097 	bne.w	8001d9c <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8001c6e:	784c      	ldrb	r4, [r1, #1]
 8001c70:	888a      	ldrh	r2, [r1, #4]
 8001c72:	2c00      	cmp	r4, #0
 8001c74:	d04a      	beq.n	8001d0c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001c76:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8001c7a:	0852      	lsrs	r2, r2, #1
 8001c7c:	b2a4      	uxth	r4, r4
 8001c7e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8001c82:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001c8c:	780c      	ldrb	r4, [r1, #0]
 8001c8e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c92:	0652      	lsls	r2, r2, #25
 8001c94:	d508      	bpl.n	8001ca8 <USB_ActivateEndpoint+0x88>
 8001c96:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ca4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001ca8:	780a      	ldrb	r2, [r1, #0]
 8001caa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001cca:	2000      	movs	r0, #0
 8001ccc:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001cce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cd2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	e7b2      	b.n	8001c46 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001ce0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ce4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001cf4:	e7a7      	b.n	8001c46 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001cf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001cfa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d02:	041b      	lsls	r3, r3, #16
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0a:	e79c      	b.n	8001c46 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001d0c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d10:	0852      	lsrs	r2, r2, #1
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3304      	adds	r3, #4
 8001d16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001d1a:	0052      	lsls	r2, r2, #1
 8001d1c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001d20:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001d24:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001d28:	690d      	ldr	r5, [r1, #16]
 8001d2a:	b292      	uxth	r2, r2
 8001d2c:	780b      	ldrb	r3, [r1, #0]
 8001d2e:	3206      	adds	r2, #6
 8001d30:	2d3e      	cmp	r5, #62	; 0x3e
 8001d32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001d36:	d929      	bls.n	8001d8c <USB_ActivateEndpoint+0x16c>
 8001d38:	f3c5 164f 	ubfx	r6, r5, #5, #16
 8001d3c:	06eb      	lsls	r3, r5, #27
 8001d3e:	bf04      	itt	eq
 8001d40:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001d44:	b29e      	uxtheq	r6, r3
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <USB_ActivateEndpoint+0x2e0>)
 8001d48:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001d52:	780a      	ldrb	r2, [r1, #0]
 8001d54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d58:	045e      	lsls	r6, r3, #17
 8001d5a:	d50b      	bpl.n	8001d74 <USB_ActivateEndpoint+0x154>
 8001d5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d64:	051b      	lsls	r3, r3, #20
 8001d66:	0d1b      	lsrs	r3, r3, #20
 8001d68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d70:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d74:	780a      	ldrb	r2, [r1, #0]
 8001d76:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001d8a:	e798      	b.n	8001cbe <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001d8c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001d90:	07ed      	lsls	r5, r5, #31
 8001d92:	bf44      	itt	mi
 8001d94:	3301      	addmi	r3, #1
 8001d96:	b29b      	uxthmi	r3, r3
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	e7d7      	b.n	8001d4c <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001d9c:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8001da0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8001da4:	0512      	lsls	r2, r2, #20
 8001da6:	0d12      	lsrs	r2, r2, #20
 8001da8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8001dac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001db0:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001db4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001db8:	780c      	ldrb	r4, [r1, #0]
 8001dba:	b292      	uxth	r2, r2
 8001dbc:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001dc0:	88cc      	ldrh	r4, [r1, #6]
 8001dc2:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001dc6:	0864      	lsrs	r4, r4, #1
 8001dc8:	0064      	lsls	r4, r4, #1
 8001dca:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8001dce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001dd2:	780c      	ldrb	r4, [r1, #0]
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	3204      	adds	r2, #4
 8001dd8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001ddc:	890c      	ldrh	r4, [r1, #8]
 8001dde:	0864      	lsrs	r4, r4, #1
 8001de0:	0064      	lsls	r4, r4, #1
 8001de2:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001de6:	784a      	ldrb	r2, [r1, #1]
 8001de8:	780c      	ldrb	r4, [r1, #0]
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d147      	bne.n	8001e7e <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001dee:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001df2:	0455      	lsls	r5, r2, #17
 8001df4:	d508      	bpl.n	8001e08 <USB_ActivateEndpoint+0x1e8>
 8001df6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e04:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e08:	780a      	ldrb	r2, [r1, #0]
 8001e0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e0e:	065c      	lsls	r4, r3, #25
 8001e10:	d50b      	bpl.n	8001e2a <USB_ActivateEndpoint+0x20a>
 8001e12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e1a:	051b      	lsls	r3, r3, #20
 8001e1c:	0d1b      	lsrs	r3, r3, #20
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001e2a:	780a      	ldrb	r2, [r1, #0]
 8001e2c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e34:	051b      	lsls	r3, r3, #20
 8001e36:	0d1b      	lsrs	r3, r3, #20
 8001e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e40:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e44:	f248 0280 	movw	r2, #32896	; 0x8080
 8001e48:	780c      	ldrb	r4, [r1, #0]
 8001e4a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	0c1b      	lsrs	r3, r3, #16
 8001e5a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001e64:	7809      	ldrb	r1, [r1, #0]
 8001e66:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001e7c:	e725      	b.n	8001cca <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001e7e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001e82:	0452      	lsls	r2, r2, #17
 8001e84:	d508      	bpl.n	8001e98 <USB_ActivateEndpoint+0x278>
 8001e86:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e98:	780a      	ldrb	r2, [r1, #0]
 8001e9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e9e:	065b      	lsls	r3, r3, #25
 8001ea0:	d50b      	bpl.n	8001eba <USB_ActivateEndpoint+0x29a>
 8001ea2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eaa:	051b      	lsls	r3, r3, #20
 8001eac:	0d1b      	lsrs	r3, r3, #20
 8001eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001eb6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001eba:	780a      	ldrb	r2, [r1, #0]
 8001ebc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec4:	051b      	lsls	r3, r3, #20
 8001ec6:	0d1b      	lsrs	r3, r3, #20
 8001ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ed4:	f248 0280 	movw	r2, #32896	; 0x8080
 8001ed8:	780c      	ldrb	r4, [r1, #0]
 8001eda:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ef0:	7809      	ldrb	r1, [r1, #0]
 8001ef2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001efe:	e7b8      	b.n	8001e72 <USB_ActivateEndpoint+0x252>
 8001f00:	ffff8000 	.word	0xffff8000

08001f04 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001f04:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001f06:	7a8c      	ldrb	r4, [r1, #10]
 8001f08:	784a      	ldrb	r2, [r1, #1]
 8001f0a:	780b      	ldrb	r3, [r1, #0]
 8001f0c:	bbcc      	cbnz	r4, 8001f82 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 8001f0e:	b302      	cbz	r2, 8001f52 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001f10:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f14:	0652      	lsls	r2, r2, #25
 8001f16:	d50b      	bpl.n	8001f30 <USB_DeactivateEndpoint+0x2c>
 8001f18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f20:	0512      	lsls	r2, r2, #20
 8001f22:	0d12      	lsrs	r2, r2, #20
 8001f24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f28:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001f2c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001f30:	780a      	ldrb	r2, [r1, #0]
 8001f32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f3e:	041b      	lsls	r3, r3, #16
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001f4e:	2000      	movs	r0, #0
 8001f50:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f52:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f56:	0454      	lsls	r4, r2, #17
 8001f58:	d50b      	bpl.n	8001f72 <USB_DeactivateEndpoint+0x6e>
 8001f5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f5e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f62:	0512      	lsls	r2, r2, #20
 8001f64:	0d12      	lsrs	r2, r2, #20
 8001f66:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f6e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001f72:	780a      	ldrb	r2, [r1, #0]
 8001f74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f80:	e7dd      	b.n	8001f3e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d148      	bne.n	8002018 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f8a:	0452      	lsls	r2, r2, #17
 8001f8c:	d50b      	bpl.n	8001fa6 <USB_DeactivateEndpoint+0xa2>
 8001f8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	0d12      	lsrs	r2, r2, #20
 8001f9a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fa6:	780a      	ldrb	r2, [r1, #0]
 8001fa8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fac:	065c      	lsls	r4, r3, #25
 8001fae:	d50b      	bpl.n	8001fc8 <USB_DeactivateEndpoint+0xc4>
 8001fb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb8:	051b      	lsls	r3, r3, #20
 8001fba:	0d1b      	lsrs	r3, r3, #20
 8001fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001fc8:	780a      	ldrb	r2, [r1, #0]
 8001fca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001fce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fd2:	051b      	lsls	r3, r3, #20
 8001fd4:	0d1b      	lsrs	r3, r3, #20
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001fe2:	f248 0280 	movw	r2, #32896	; 0x8080
 8001fe6:	780c      	ldrb	r4, [r1, #0]
 8001fe8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	0c1b      	lsrs	r3, r3, #16
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ffe:	7809      	ldrb	r1, [r1, #0]
 8002000:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	0c1b      	lsrs	r3, r3, #16
 8002010:	4313      	orrs	r3, r2
 8002012:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002016:	e79a      	b.n	8001f4e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002018:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800201c:	0452      	lsls	r2, r2, #17
 800201e:	d50b      	bpl.n	8002038 <USB_DeactivateEndpoint+0x134>
 8002020:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002024:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002028:	0512      	lsls	r2, r2, #20
 800202a:	0d12      	lsrs	r2, r2, #20
 800202c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002030:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002034:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002038:	780a      	ldrb	r2, [r1, #0]
 800203a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800203e:	065b      	lsls	r3, r3, #25
 8002040:	d50b      	bpl.n	800205a <USB_DeactivateEndpoint+0x156>
 8002042:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	0d1b      	lsrs	r3, r3, #20
 800204e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002056:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800205a:	780a      	ldrb	r2, [r1, #0]
 800205c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002060:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002064:	051b      	lsls	r3, r3, #20
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002074:	f248 0280 	movw	r2, #32896	; 0x8080
 8002078:	780c      	ldrb	r4, [r1, #0]
 800207a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800207e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	4313      	orrs	r3, r2
 800208c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002090:	7809      	ldrb	r1, [r1, #0]
 8002092:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800209a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209e:	e7b5      	b.n	800200c <USB_DeactivateEndpoint+0x108>

080020a0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 80020a0:	780a      	ldrb	r2, [r1, #0]
 80020a2:	b98a      	cbnz	r2, 80020c8 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80020a4:	8803      	ldrh	r3, [r0, #0]
 80020a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020b6:	f083 0310 	eor.w	r3, r3, #16
 80020ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 80020c4:	2000      	movs	r0, #0
 80020c6:	4770      	bx	lr
    if (ep->is_in)
 80020c8:	784b      	ldrb	r3, [r1, #1]
 80020ca:	b183      	cbz	r3, 80020ee <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 80020cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	0c1b      	lsrs	r3, r3, #16
 80020dc:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 80020e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80020ec:	e7ea      	b.n	80020c4 <USB_EPSetStall+0x24>
 80020ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80020f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002102:	e7ed      	b.n	80020e0 <USB_EPSetStall+0x40>

08002104 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8002104:	784b      	ldrb	r3, [r1, #1]
 8002106:	780a      	ldrb	r2, [r1, #0]
 8002108:	b313      	cbz	r3, 8002150 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800210a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800210e:	065b      	lsls	r3, r3, #25
 8002110:	d50b      	bpl.n	800212a <USB_EPClearStall+0x26>
 8002112:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211a:	051b      	lsls	r3, r3, #20
 800211c:	0d1b      	lsrs	r3, r3, #20
 800211e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002122:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002126:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800212a:	780a      	ldrb	r2, [r1, #0]
 800212c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002148:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 800214c:	2000      	movs	r0, #0
 800214e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002150:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002154:	045b      	lsls	r3, r3, #17
 8002156:	d50b      	bpl.n	8002170 <USB_EPClearStall+0x6c>
 8002158:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800215c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002160:	051b      	lsls	r3, r3, #20
 8002162:	0d1b      	lsrs	r3, r3, #20
 8002164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002170:	780a      	ldrb	r2, [r1, #0]
 8002172:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217e:	041b      	lsls	r3, r3, #16
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002186:	e7db      	b.n	8002140 <USB_EPClearStall+0x3c>

08002188 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002188:	b911      	cbnz	r1, 8002190 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002190:	2000      	movs	r0, #0
 8002192:	4770      	bx	lr

08002194 <USB_DevConnect>:
 8002194:	2000      	movs	r0, #0
 8002196:	4770      	bx	lr

08002198 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002198:	2000      	movs	r0, #0
 800219a:	4770      	bx	lr

0800219c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 800219c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80021a0:	b280      	uxth	r0, r0
 80021a2:	4770      	bx	lr

080021a4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80021a4:	2000      	movs	r0, #0
 80021a6:	4770      	bx	lr

080021a8 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80021a8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80021aa:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80021ac:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80021ae:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 80021b2:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80021b4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80021b8:	42a3      	cmp	r3, r4
 80021ba:	d100      	bne.n	80021be <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 80021bc:	bd10      	pop	{r4, pc}
 80021be:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 80021c2:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 80021c6:	3401      	adds	r4, #1
 80021c8:	e7f6      	b.n	80021b8 <USB_WritePMA+0x10>
	...

080021cc <USB_EPStartXfer>:
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 80021d0:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 80021d2:	7849      	ldrb	r1, [r1, #1]
{
 80021d4:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 80021d6:	2901      	cmp	r1, #1
 80021d8:	6933      	ldr	r3, [r6, #16]
 80021da:	7ab0      	ldrb	r0, [r6, #10]
 80021dc:	d166      	bne.n	80022ac <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 80021de:	429a      	cmp	r2, r3
 80021e0:	461c      	mov	r4, r3
      ep->xfer_len =0;
 80021e2:	bf9b      	ittet	ls
 80021e4:	2300      	movls	r3, #0
 80021e6:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 80021e8:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 80021ea:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 80021ec:	bf88      	it	hi
 80021ee:	61b2      	strhi	r2, [r6, #24]
 80021f0:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 80021f2:	bb10      	cbnz	r0, 800223a <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 80021f4:	88b2      	ldrh	r2, [r6, #4]
 80021f6:	6971      	ldr	r1, [r6, #20]
 80021f8:	4628      	mov	r0, r5
 80021fa:	f7ff ffd5 	bl	80021a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80021fe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002202:	7832      	ldrb	r2, [r6, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	3302      	adds	r3, #2
 8002208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800220c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002210:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002214:	7832      	ldrb	r2, [r6, #0]
 8002216:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800221a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800221e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800222a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800222e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002232:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002236:	2000      	movs	r0, #0
 8002238:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800223a:	7832      	ldrb	r2, [r6, #0]
 800223c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002240:	00d2      	lsls	r2, r2, #3
 8002242:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002246:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800224a:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800224c:	d01a      	beq.n	8002284 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800224e:	3102      	adds	r1, #2
 8002250:	440a      	add	r2, r1
 8002252:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002256:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 800225a:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 800225c:	6971      	ldr	r1, [r6, #20]
 800225e:	4628      	mov	r0, r5
 8002260:	f7ff ffa2 	bl	80021a8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002264:	7873      	ldrb	r3, [r6, #1]
 8002266:	7832      	ldrb	r2, [r6, #0]
 8002268:	b99b      	cbnz	r3, 8002292 <USB_EPStartXfer+0xc6>
 800226a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800226e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002272:	051b      	lsls	r3, r3, #20
 8002274:	0d1b      	lsrs	r3, r3, #20
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800227e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002282:	e7c7      	b.n	8002214 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002284:	440a      	add	r2, r1
 8002286:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800228a:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 800228e:	88f2      	ldrh	r2, [r6, #6]
 8002290:	e7e4      	b.n	800225c <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002292:	2b01      	cmp	r3, #1
 8002294:	d1be      	bne.n	8002214 <USB_EPStartXfer+0x48>
 8002296:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800229a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800229e:	051b      	lsls	r3, r3, #20
 80022a0:	0d1b      	lsrs	r3, r3, #20
 80022a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022aa:	e7e8      	b.n	800227e <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 80022ac:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 80022ae:	bf93      	iteet	ls
 80022b0:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 80022b2:	1ad2      	subhi	r2, r2, r3
 80022b4:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 80022b6:	61b3      	strls	r3, [r6, #24]
 80022b8:	bf98      	it	ls
 80022ba:	4613      	movls	r3, r2
 80022bc:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 80022be:	bb70      	cbnz	r0, 800231e <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80022c0:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80022c4:	2b3e      	cmp	r3, #62	; 0x3e
 80022c6:	b289      	uxth	r1, r1
 80022c8:	f101 0106 	add.w	r1, r1, #6
 80022cc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80022d0:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80022d4:	d918      	bls.n	8002308 <USB_EPStartXfer+0x13c>
 80022d6:	f3c3 124f 	ubfx	r2, r3, #5, #16
 80022da:	06db      	lsls	r3, r3, #27
 80022dc:	bf04      	itt	eq
 80022de:	f102 33ff 	addeq.w	r3, r2, #4294967295
 80022e2:	b29a      	uxtheq	r2, r3
 80022e4:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <USB_EPStartXfer+0x1fc>)
 80022e6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022f0:	7832      	ldrb	r2, [r6, #0]
 80022f2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002306:	e790      	b.n	800222a <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002308:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800230c:	07dc      	lsls	r4, r3, #31
 800230e:	bf44      	itt	mi
 8002310:	3201      	addmi	r2, #1
 8002312:	b292      	uxthmi	r2, r2
 8002314:	0292      	lsls	r2, r2, #10
 8002316:	b292      	uxth	r2, r2
 8002318:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 800231c:	e7e8      	b.n	80022f0 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800231e:	b9b9      	cbnz	r1, 8002350 <USB_EPStartXfer+0x184>
 8002320:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002324:	2b3e      	cmp	r3, #62	; 0x3e
 8002326:	b289      	uxth	r1, r1
 8002328:	f101 0102 	add.w	r1, r1, #2
 800232c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002330:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002334:	d928      	bls.n	8002388 <USB_EPStartXfer+0x1bc>
 8002336:	f3c3 104f 	ubfx	r0, r3, #5, #16
 800233a:	06da      	lsls	r2, r3, #27
 800233c:	bf04      	itt	eq
 800233e:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002342:	b290      	uxtheq	r0, r2
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <USB_EPStartXfer+0x1fc>)
 8002346:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 800234a:	b292      	uxth	r2, r2
 800234c:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002350:	7872      	ldrb	r2, [r6, #1]
 8002352:	7831      	ldrb	r1, [r6, #0]
 8002354:	bb5a      	cbnz	r2, 80023ae <USB_EPStartXfer+0x1e2>
 8002356:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800235a:	2b3e      	cmp	r3, #62	; 0x3e
 800235c:	b292      	uxth	r2, r2
 800235e:	f102 0206 	add.w	r2, r2, #6
 8002362:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002366:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800236a:	d915      	bls.n	8002398 <USB_EPStartXfer+0x1cc>
 800236c:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002370:	06dc      	lsls	r4, r3, #27
 8002372:	bf04      	itt	eq
 8002374:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002378:	b299      	uxtheq	r1, r3
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <USB_EPStartXfer+0x1fc>)
 800237c:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002380:	b29b      	uxth	r3, r3
 8002382:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002386:	e7b3      	b.n	80022f0 <USB_EPStartXfer+0x124>
 8002388:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800238c:	07d8      	lsls	r0, r3, #31
 800238e:	bf44      	itt	mi
 8002390:	3201      	addmi	r2, #1
 8002392:	b292      	uxthmi	r2, r2
 8002394:	0292      	lsls	r2, r2, #10
 8002396:	e7d8      	b.n	800234a <USB_EPStartXfer+0x17e>
 8002398:	f3c3 014f 	ubfx	r1, r3, #1, #16
 800239c:	07db      	lsls	r3, r3, #31
 800239e:	bf44      	itt	mi
 80023a0:	3101      	addmi	r1, #1
 80023a2:	b289      	uxthmi	r1, r1
 80023a4:	0289      	lsls	r1, r1, #10
 80023a6:	b289      	uxth	r1, r1
 80023a8:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 80023ac:	e7a0      	b.n	80022f0 <USB_EPStartXfer+0x124>
 80023ae:	2a01      	cmp	r2, #1
 80023b0:	d19e      	bne.n	80022f0 <USB_EPStartXfer+0x124>
 80023b2:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80023b6:	b292      	uxth	r2, r2
 80023b8:	3202      	adds	r2, #2
 80023ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80023be:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80023c2:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 80023c6:	e793      	b.n	80022f0 <USB_EPStartXfer+0x124>
 80023c8:	ffff8000 	.word	0xffff8000

080023cc <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80023cc:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 80023ce:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80023d0:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80023d2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 80023d6:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80023d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 80023dc:	42a3      	cmp	r3, r4
 80023de:	d100      	bne.n	80023e2 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80023e0:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80023e2:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80023e6:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 80023ea:	3401      	adds	r4, #1
 80023ec:	e7f6      	b.n	80023dc <USB_ReadPMA+0x10>

080023ee <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80023ee:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80023f2:	b11b      	cbz	r3, 80023fc <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 80023f4:	2000      	movs	r0, #0
 80023f6:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 80023fa:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 80023fc:	2002      	movs	r0, #2
  }
}
 80023fe:	4770      	bx	lr

08002400 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002400:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002404:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002406:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800240a:	b15b      	cbz	r3, 8002424 <USBD_CDC_EP0_RxReady+0x24>
 800240c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002410:	28ff      	cmp	r0, #255	; 0xff
 8002412:	d007      	beq.n	8002424 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800241a:	4621      	mov	r1, r4
 800241c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800241e:	23ff      	movs	r3, #255	; 0xff
 8002420:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002424:	2000      	movs	r0, #0
 8002426:	bd10      	pop	{r4, pc}

08002428 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002428:	2343      	movs	r3, #67	; 0x43
 800242a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800242c:	4800      	ldr	r0, [pc, #0]	; (8002430 <USBD_CDC_GetFSCfgDesc+0x8>)
 800242e:	4770      	bx	lr
 8002430:	20000040 	.word	0x20000040

08002434 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002434:	2343      	movs	r3, #67	; 0x43
 8002436:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002438:	4800      	ldr	r0, [pc, #0]	; (800243c <USBD_CDC_GetHSCfgDesc+0x8>)
 800243a:	4770      	bx	lr
 800243c:	20000084 	.word	0x20000084

08002440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002440:	2343      	movs	r3, #67	; 0x43
 8002442:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002444:	4800      	ldr	r0, [pc, #0]	; (8002448 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002446:	4770      	bx	lr
 8002448:	200000d4 	.word	0x200000d4

0800244c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800244c:	230a      	movs	r3, #10
 800244e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002450:	4800      	ldr	r0, [pc, #0]	; (8002454 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002452:	4770      	bx	lr
 8002454:	200000c8 	.word	0x200000c8

08002458 <USBD_CDC_DataOut>:
{      
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800245c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002460:	f000 ffd0 	bl	8003404 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002464:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002468:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800246c:	b14b      	cbz	r3, 8002482 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800246e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002472:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 800247c:	4798      	blx	r3
    return USBD_OK;
 800247e:	2000      	movs	r0, #0
 8002480:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002482:	2002      	movs	r0, #2
}
 8002484:	bd38      	pop	{r3, r4, r5, pc}
	...

08002488 <USBD_CDC_Setup>:
{
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800248a:	780f      	ldrb	r7, [r1, #0]
{
 800248c:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800248e:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8002492:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002494:	d023      	beq.n	80024de <USBD_CDC_Setup+0x56>
 8002496:	2b20      	cmp	r3, #32
 8002498:	d119      	bne.n	80024ce <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800249a:	88ca      	ldrh	r2, [r1, #6]
 800249c:	784b      	ldrb	r3, [r1, #1]
 800249e:	b1c2      	cbz	r2, 80024d2 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 80024a0:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80024a2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 80024a6:	d50b      	bpl.n	80024c0 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80024a8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80024ac:	4618      	mov	r0, r3
 80024ae:	688f      	ldr	r7, [r1, #8]
 80024b0:	4629      	mov	r1, r5
 80024b2:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 80024b4:	4629      	mov	r1, r5
 80024b6:	4630      	mov	r0, r6
 80024b8:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 80024ba:	f000 fb72 	bl	8002ba2 <USBD_CtlSendData>
      break;
 80024be:	e006      	b.n	80024ce <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 80024c0:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80024c4:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 80024c8:	4629      	mov	r1, r5
 80024ca:	f000 fb7f 	bl	8002bcc <USBD_CtlPrepareRx>
}
 80024ce:	2000      	movs	r0, #0
 80024d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80024d2:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 80024d6:	6884      	ldr	r4, [r0, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	47a0      	blx	r4
 80024dc:	e7f7      	b.n	80024ce <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 80024de:	784b      	ldrb	r3, [r1, #1]
 80024e0:	2b0a      	cmp	r3, #10
 80024e2:	d1f4      	bne.n	80024ce <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 80024e4:	2201      	movs	r2, #1
 80024e6:	4901      	ldr	r1, [pc, #4]	; (80024ec <USBD_CDC_Setup+0x64>)
 80024e8:	e7e7      	b.n	80024ba <USBD_CDC_Setup+0x32>
 80024ea:	bf00      	nop
 80024ec:	2000017c 	.word	0x2000017c

080024f0 <USBD_CDC_DeInit>:
{
 80024f0:	b510      	push	{r4, lr}
 80024f2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80024f4:	2181      	movs	r1, #129	; 0x81
 80024f6:	f000 ff21 	bl	800333c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80024fa:	2101      	movs	r1, #1
 80024fc:	4620      	mov	r0, r4
 80024fe:	f000 ff1d 	bl	800333c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002502:	2182      	movs	r1, #130	; 0x82
 8002504:	4620      	mov	r0, r4
 8002506:	f000 ff19 	bl	800333c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800250a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800250e:	b153      	cbz	r3, 8002526 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002510:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002518:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800251c:	f000 ff7c 	bl	8003418 <USBD_static_free>
    pdev->pClassData = NULL;
 8002520:	2300      	movs	r3, #0
 8002522:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002526:	2000      	movs	r0, #0
 8002528:	bd10      	pop	{r4, pc}

0800252a <USBD_CDC_Init>:
{
 800252a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800252c:	7c03      	ldrb	r3, [r0, #16]
{
 800252e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002530:	bb7b      	cbnz	r3, 8002592 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002536:	2202      	movs	r2, #2
 8002538:	2181      	movs	r1, #129	; 0x81
 800253a:	f000 feef 	bl	800331c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002542:	2202      	movs	r2, #2
 8002544:	2101      	movs	r1, #1
 8002546:	4620      	mov	r0, r4
 8002548:	f000 fee8 	bl	800331c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800254c:	2308      	movs	r3, #8
 800254e:	2203      	movs	r2, #3
 8002550:	2182      	movs	r1, #130	; 0x82
 8002552:	4620      	mov	r0, r4
 8002554:	f000 fee2 	bl	800331c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002558:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800255c:	f000 ff58 	bl	8003410 <USBD_static_malloc>
 8002560:	4606      	mov	r6, r0
 8002562:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002566:	b320      	cbz	r0, 80025b2 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8002568:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800256a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002572:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002574:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002578:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800257c:	b987      	cbnz	r7, 80025a0 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800257e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002582:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002586:	2101      	movs	r1, #1
 8002588:	4620      	mov	r0, r4
 800258a:	f000 ff2d 	bl	80033e8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800258e:	4638      	mov	r0, r7
 8002590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002592:	2340      	movs	r3, #64	; 0x40
 8002594:	2202      	movs	r2, #2
 8002596:	2181      	movs	r1, #129	; 0x81
 8002598:	f000 fec0 	bl	800331c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	e7d0      	b.n	8002542 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80025a6:	2101      	movs	r1, #1
 80025a8:	4620      	mov	r0, r4
 80025aa:	f000 ff1d 	bl	80033e8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 80025ae:	4628      	mov	r0, r5
 80025b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 80025b2:	2001      	movs	r0, #1
}
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025b6 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80025b6:	b119      	cbz	r1, 80025c0 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80025b8:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80025bc:	2000      	movs	r0, #0
 80025be:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80025c0:	2002      	movs	r0, #2
  }
  
  return ret;
}
 80025c2:	4770      	bx	lr

080025c4 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80025c4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80025c8:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80025ca:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80025ce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80025d2:	4770      	bx	lr

080025d4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80025d4:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80025d8:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80025da:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80025de:	4770      	bx	lr

080025e0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80025e0:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80025e4:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80025e6:	b162      	cbz	r2, 8002602 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80025e8:	7c04      	ldrb	r4, [r0, #16]
 80025ea:	b944      	cbnz	r4, 80025fe <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80025ec:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80025f0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80025f4:	2101      	movs	r1, #1
 80025f6:	f000 fef7 	bl	80033e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80025fa:	2000      	movs	r0, #0
 80025fc:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80025fe:	2340      	movs	r3, #64	; 0x40
 8002600:	e7f6      	b.n	80025f0 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002602:	2002      	movs	r0, #2
  }
}
 8002604:	bd10      	pop	{r4, pc}

08002606 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002606:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002608:	b180      	cbz	r0, 800262c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800260a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800260e:	b113      	cbz	r3, 8002616 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002616:	b109      	cbz	r1, 800261c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002618:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800261c:	2301      	movs	r3, #1
  pdev->id = id;
 800261e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002620:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002624:	f000 fe2a 	bl	800327c <USBD_LL_Init>
  
  return USBD_OK; 
 8002628:	2000      	movs	r0, #0
 800262a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800262c:	2002      	movs	r0, #2
}
 800262e:	bd08      	pop	{r3, pc}

08002630 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002630:	b119      	cbz	r1, 800263a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002632:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002636:	2000      	movs	r0, #0
 8002638:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800263a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800263c:	4770      	bx	lr

0800263e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800263e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002640:	f000 fe5e 	bl	8003300 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002644:	2000      	movs	r0, #0
 8002646:	bd08      	pop	{r3, pc}

08002648 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002648:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800264a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800264e:	b90b      	cbnz	r3, 8002654 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002650:	2002      	movs	r0, #2
 8002652:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4798      	blx	r3
 8002658:	2800      	cmp	r0, #0
 800265a:	d1f9      	bne.n	8002650 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800265c:	bd08      	pop	{r3, pc}

0800265e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800265e:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002660:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4798      	blx	r3
  return USBD_OK;
}
 8002668:	2000      	movs	r0, #0
 800266a:	bd08      	pop	{r3, pc}

0800266c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800266c:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800266e:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002672:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002674:	4628      	mov	r0, r5
 8002676:	f000 fa64 	bl	8002b42 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800267a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800267c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002680:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002684:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002688:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800268c:	f001 031f 	and.w	r3, r1, #31
 8002690:	2b01      	cmp	r3, #1
 8002692:	d00e      	beq.n	80026b2 <USBD_LL_SetupStage+0x46>
 8002694:	d307      	bcc.n	80026a6 <USBD_LL_SetupStage+0x3a>
 8002696:	2b02      	cmp	r3, #2
 8002698:	d010      	beq.n	80026bc <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800269a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 fe5a 	bl	8003358 <USBD_LL_StallEP>
    break;
 80026a4:	e003      	b.n	80026ae <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80026a6:	4629      	mov	r1, r5
 80026a8:	4620      	mov	r0, r4
 80026aa:	f000 f8d5 	bl	8002858 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80026ae:	2000      	movs	r0, #0
 80026b0:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80026b2:	4629      	mov	r1, r5
 80026b4:	4620      	mov	r0, r4
 80026b6:	f000 f9c9 	bl	8002a4c <USBD_StdItfReq>
    break;
 80026ba:	e7f8      	b.n	80026ae <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80026bc:	4629      	mov	r1, r5
 80026be:	4620      	mov	r0, r4
 80026c0:	f000 f9dc 	bl	8002a7c <USBD_StdEPReq>
    break;
 80026c4:	e7f3      	b.n	80026ae <USBD_LL_SetupStage+0x42>

080026c6 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80026c6:	b538      	push	{r3, r4, r5, lr}
 80026c8:	4604      	mov	r4, r0
 80026ca:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80026cc:	bb11      	cbnz	r1, 8002714 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80026ce:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d10f      	bne.n	80026f6 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80026d6:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80026da:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80026de:	4293      	cmp	r3, r2
 80026e0:	d90b      	bls.n	80026fa <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80026e2:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80026e4:	429a      	cmp	r2, r3
 80026e6:	bf28      	it	cs
 80026e8:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80026ea:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80026ee:	b292      	uxth	r2, r2
 80026f0:	4629      	mov	r1, r5
 80026f2:	f000 fa7a 	bl	8002bea <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80026f6:	2000      	movs	r0, #0
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80026fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	b123      	cbz	r3, 800270c <USBD_LL_DataOutStage+0x46>
 8002702:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002706:	2a03      	cmp	r2, #3
 8002708:	d100      	bne.n	800270c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800270a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800270c:	4620      	mov	r0, r4
 800270e:	f000 fa74 	bl	8002bfa <USBD_CtlSendStatus>
 8002712:	e7f0      	b.n	80026f6 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002714:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0eb      	beq.n	80026f6 <USBD_LL_DataOutStage+0x30>
 800271e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002722:	2a03      	cmp	r2, #3
 8002724:	d1e7      	bne.n	80026f6 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002726:	4798      	blx	r3
 8002728:	e7e5      	b.n	80026f6 <USBD_LL_DataOutStage+0x30>

0800272a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800272a:	b570      	push	{r4, r5, r6, lr}
 800272c:	4613      	mov	r3, r2
 800272e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002730:	460e      	mov	r6, r1
 8002732:	2900      	cmp	r1, #0
 8002734:	d13d      	bne.n	80027b2 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002736:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800273a:	2a02      	cmp	r2, #2
 800273c:	d10f      	bne.n	800275e <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800273e:	69c5      	ldr	r5, [r0, #28]
 8002740:	6a02      	ldr	r2, [r0, #32]
 8002742:	4295      	cmp	r5, r2
 8002744:	d914      	bls.n	8002770 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002746:	1aaa      	subs	r2, r5, r2
 8002748:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800274a:	4619      	mov	r1, r3
 800274c:	b292      	uxth	r2, r2
 800274e:	f000 fa35 	bl	8002bbc <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002752:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002754:	461a      	mov	r2, r3
 8002756:	4619      	mov	r1, r3
 8002758:	4620      	mov	r0, r4
 800275a:	f000 fe45 	bl	80033e8 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800275e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002762:	2b01      	cmp	r3, #1
 8002764:	d102      	bne.n	800276c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800276c:	2000      	movs	r0, #0
 800276e:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002770:	6983      	ldr	r3, [r0, #24]
 8002772:	fbb3 f5f2 	udiv	r5, r3, r2
 8002776:	fb02 3515 	mls	r5, r2, r5, r3
 800277a:	b965      	cbnz	r5, 8002796 <USBD_LL_DataInStage+0x6c>
 800277c:	429a      	cmp	r2, r3
 800277e:	d80a      	bhi.n	8002796 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002780:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002784:	4293      	cmp	r3, r2
 8002786:	d206      	bcs.n	8002796 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002788:	462a      	mov	r2, r5
 800278a:	f000 fa17 	bl	8002bbc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800278e:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002792:	462b      	mov	r3, r5
 8002794:	e7de      	b.n	8002754 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002796:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	b12b      	cbz	r3, 80027aa <USBD_LL_DataInStage+0x80>
 800279e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80027a2:	2a03      	cmp	r2, #3
 80027a4:	d101      	bne.n	80027aa <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80027a6:	4620      	mov	r0, r4
 80027a8:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80027aa:	4620      	mov	r0, r4
 80027ac:	f000 fa30 	bl	8002c10 <USBD_CtlReceiveStatus>
 80027b0:	e7d5      	b.n	800275e <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 80027b2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0d7      	beq.n	800276c <USBD_LL_DataInStage+0x42>
 80027bc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80027c0:	2a03      	cmp	r2, #3
 80027c2:	d1d3      	bne.n	800276c <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80027c4:	4798      	blx	r3
 80027c6:	e7d1      	b.n	800276c <USBD_LL_DataInStage+0x42>

080027c8 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80027c8:	2200      	movs	r2, #0
{
 80027ca:	b538      	push	{r3, r4, r5, lr}
 80027cc:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80027ce:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80027d0:	4611      	mov	r1, r2
 80027d2:	2340      	movs	r3, #64	; 0x40
 80027d4:	f000 fda2 	bl	800331c <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80027d8:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80027da:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80027de:	2200      	movs	r2, #0
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	4620      	mov	r0, r4
 80027e4:	f000 fd9a 	bl	800331c <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80027ee:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80027f2:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80027f4:	b12b      	cbz	r3, 8002802 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80027f6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027fa:	7921      	ldrb	r1, [r4, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4620      	mov	r0, r4
 8002800:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002802:	2000      	movs	r0, #0
 8002804:	bd38      	pop	{r3, r4, r5, pc}

08002806 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002806:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002808:	2000      	movs	r0, #0
 800280a:	4770      	bx	lr

0800280c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800280c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002810:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002814:	2304      	movs	r3, #4
 8002816:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800281a:	2000      	movs	r0, #0
 800281c:	4770      	bx	lr

0800281e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800281e:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002822:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002826:	2000      	movs	r0, #0
 8002828:	4770      	bx	lr

0800282a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800282a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800282c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002830:	2a03      	cmp	r2, #3
 8002832:	d104      	bne.n	800283e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002834:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	b103      	cbz	r3, 800283e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800283c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800283e:	2000      	movs	r0, #0
 8002840:	bd08      	pop	{r3, pc}

08002842 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002842:	b510      	push	{r4, lr}
 8002844:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	f000 fd86 	bl	8003358 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800284c:	4620      	mov	r0, r4
}
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002852:	2100      	movs	r1, #0
 8002854:	f000 bd80 	b.w	8003358 <USBD_LL_StallEP>

08002858 <USBD_StdDevReq>:
{
 8002858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800285a:	784b      	ldrb	r3, [r1, #1]
{
 800285c:	4604      	mov	r4, r0
 800285e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002860:	2b09      	cmp	r3, #9
 8002862:	d879      	bhi.n	8002958 <USBD_StdDevReq+0x100>
 8002864:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002868:	00e500c9 	.word	0x00e500c9
 800286c:	00d90078 	.word	0x00d90078
 8002870:	006d0078 	.word	0x006d0078
 8002874:	0078000a 	.word	0x0078000a
 8002878:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800287c:	884b      	ldrh	r3, [r1, #2]
 800287e:	0a1a      	lsrs	r2, r3, #8
 8002880:	3a01      	subs	r2, #1
 8002882:	2a06      	cmp	r2, #6
 8002884:	d868      	bhi.n	8002958 <USBD_StdDevReq+0x100>
 8002886:	e8df f002 	tbb	[pc, r2]
 800288a:	1c04      	.short	0x1c04
 800288c:	49676729 	.word	0x49676729
 8002890:	52          	.byte	0x52
 8002891:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002892:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002896:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002898:	f10d 0106 	add.w	r1, sp, #6
 800289c:	7c20      	ldrb	r0, [r4, #16]
 800289e:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80028a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	d067      	beq.n	8002978 <USBD_StdDevReq+0x120>
 80028a8:	88eb      	ldrh	r3, [r5, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d064      	beq.n	8002978 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80028ae:	429a      	cmp	r2, r3
 80028b0:	bf28      	it	cs
 80028b2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 80028b4:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80028b6:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80028ba:	4620      	mov	r0, r4
 80028bc:	f000 f971 	bl	8002ba2 <USBD_CtlSendData>
 80028c0:	e05a      	b.n	8002978 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80028c2:	7c02      	ldrb	r2, [r0, #16]
 80028c4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80028c8:	b932      	cbnz	r2, 80028d8 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80028cc:	f10d 0006 	add.w	r0, sp, #6
 80028d0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80028d2:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80028d4:	7043      	strb	r3, [r0, #1]
 80028d6:	e7e3      	b.n	80028a0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	e7f7      	b.n	80028cc <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d83a      	bhi.n	8002958 <USBD_StdDevReq+0x100>
 80028e2:	e8df f003 	tbb	[pc, r3]
 80028e6:	0703      	.short	0x0703
 80028e8:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80028ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	e7d1      	b.n	8002898 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80028f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	e7cd      	b.n	8002898 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80028fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	e7c9      	b.n	8002898 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002904:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	e7c5      	b.n	8002898 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800290c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	e7c1      	b.n	8002898 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002914:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	e7bd      	b.n	8002898 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800291c:	7c03      	ldrb	r3, [r0, #16]
 800291e:	b9db      	cbnz	r3, 8002958 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002920:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002924:	f10d 0006 	add.w	r0, sp, #6
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	4798      	blx	r3
 800292c:	e7b8      	b.n	80028a0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800292e:	7c03      	ldrb	r3, [r0, #16]
 8002930:	b993      	cbnz	r3, 8002958 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002932:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002936:	f10d 0006 	add.w	r0, sp, #6
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800293e:	2307      	movs	r3, #7
 8002940:	e7c8      	b.n	80028d4 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002942:	888b      	ldrh	r3, [r1, #4]
 8002944:	b943      	cbnz	r3, 8002958 <USBD_StdDevReq+0x100>
 8002946:	88cb      	ldrh	r3, [r1, #6]
 8002948:	b933      	cbnz	r3, 8002958 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800294a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800294e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002950:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8002952:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002956:	d103      	bne.n	8002960 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff ff72 	bl	8002842 <USBD_CtlError.constprop.0>
    break;
 800295e:	e00b      	b.n	8002978 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8002960:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8002964:	4629      	mov	r1, r5
 8002966:	f000 fd23 	bl	80033b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800296a:	4620      	mov	r0, r4
 800296c:	f000 f945 	bl	8002bfa <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8002970:	b12d      	cbz	r5, 800297e <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002972:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8002974:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8002978:	2000      	movs	r0, #0
 800297a:	b003      	add	sp, #12
 800297c:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800297e:	2301      	movs	r3, #1
 8002980:	e7f8      	b.n	8002974 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 8002982:	7889      	ldrb	r1, [r1, #2]
 8002984:	4d30      	ldr	r5, [pc, #192]	; (8002a48 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002986:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8002988:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800298a:	d8e5      	bhi.n	8002958 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 800298c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002990:	2b02      	cmp	r3, #2
 8002992:	d00c      	beq.n	80029ae <USBD_StdDevReq+0x156>
 8002994:	2b03      	cmp	r3, #3
 8002996:	d1df      	bne.n	8002958 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8002998:	b9b1      	cbnz	r1, 80029c8 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800299a:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 800299c:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800299e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80029a2:	f7ff fe5c 	bl	800265e <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80029a6:	4620      	mov	r0, r4
 80029a8:	f000 f927 	bl	8002bfa <USBD_CtlSendStatus>
 80029ac:	e7e4      	b.n	8002978 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80029ae:	2900      	cmp	r1, #0
 80029b0:	d0f9      	beq.n	80029a6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80029b2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80029b4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80029b6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80029b8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff fe43 	bl	8002648 <USBD_SetClassConfig>
 80029c2:	2802      	cmp	r0, #2
 80029c4:	d1ef      	bne.n	80029a6 <USBD_StdDevReq+0x14e>
 80029c6:	e7c7      	b.n	8002958 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80029c8:	6841      	ldr	r1, [r0, #4]
 80029ca:	2901      	cmp	r1, #1
 80029cc:	d0eb      	beq.n	80029a6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80029ce:	b2c9      	uxtb	r1, r1
 80029d0:	f7ff fe45 	bl	800265e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80029d4:	7829      	ldrb	r1, [r5, #0]
 80029d6:	6061      	str	r1, [r4, #4]
 80029d8:	e7f0      	b.n	80029bc <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80029da:	88ca      	ldrh	r2, [r1, #6]
 80029dc:	2a01      	cmp	r2, #1
 80029de:	d1bb      	bne.n	8002958 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80029e0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d003      	beq.n	80029f0 <USBD_StdDevReq+0x198>
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d1b5      	bne.n	8002958 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80029ec:	1d01      	adds	r1, r0, #4
 80029ee:	e764      	b.n	80028ba <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80029f0:	4601      	mov	r1, r0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f841 3f08 	str.w	r3, [r1, #8]!
 80029f8:	e75f      	b.n	80028ba <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80029fa:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80029fe:	3b02      	subs	r3, #2
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d8a9      	bhi.n	8002958 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002a04:	2301      	movs	r3, #1
 8002a06:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002a08:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8002a0c:	b10b      	cbz	r3, 8002a12 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002a0e:	2303      	movs	r3, #3
 8002a10:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002a12:	2202      	movs	r2, #2
 8002a14:	f104 010c 	add.w	r1, r4, #12
 8002a18:	e74f      	b.n	80028ba <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002a1a:	884b      	ldrh	r3, [r1, #2]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d1ab      	bne.n	8002978 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002a20:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002a24:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002a28:	4629      	mov	r1, r5
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4798      	blx	r3
 8002a30:	e7b9      	b.n	80029a6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002a32:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002a36:	3b02      	subs	r3, #2
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d88d      	bhi.n	8002958 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002a3c:	884b      	ldrh	r3, [r1, #2]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d19a      	bne.n	8002978 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002a42:	2300      	movs	r3, #0
 8002a44:	e7ec      	b.n	8002a20 <USBD_StdDevReq+0x1c8>
 8002a46:	bf00      	nop
 8002a48:	2000017d 	.word	0x2000017d

08002a4c <USBD_StdItfReq>:
{
 8002a4c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8002a4e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8002a52:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8002a54:	2b03      	cmp	r3, #3
{
 8002a56:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8002a58:	d10d      	bne.n	8002a76 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8002a5a:	790b      	ldrb	r3, [r1, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d80a      	bhi.n	8002a76 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8002a60:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8002a68:	88eb      	ldrh	r3, [r5, #6]
 8002a6a:	b913      	cbnz	r3, 8002a72 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f000 f8c4 	bl	8002bfa <USBD_CtlSendStatus>
}
 8002a72:	2000      	movs	r0, #0
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8002a76:	f7ff fee4 	bl	8002842 <USBD_CtlError.constprop.0>
    break;
 8002a7a:	e7fa      	b.n	8002a72 <USBD_StdItfReq+0x26>

08002a7c <USBD_StdEPReq>:
{
 8002a7c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8002a7e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8002a80:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8002a82:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002a86:	2a20      	cmp	r2, #32
{
 8002a88:	4604      	mov	r4, r0
 8002a8a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8002a8c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8002a8e:	d105      	bne.n	8002a9c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8002a90:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	4798      	blx	r3
}
 8002a98:	2000      	movs	r0, #0
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8002a9c:	784a      	ldrb	r2, [r1, #1]
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d01c      	beq.n	8002adc <USBD_StdEPReq+0x60>
 8002aa2:	d32a      	bcc.n	8002afa <USBD_StdEPReq+0x7e>
 8002aa4:	2a03      	cmp	r2, #3
 8002aa6:	d1f7      	bne.n	8002a98 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002aa8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002aac:	2a02      	cmp	r2, #2
 8002aae:	d040      	beq.n	8002b32 <USBD_StdEPReq+0xb6>
 8002ab0:	2a03      	cmp	r2, #3
 8002ab2:	d002      	beq.n	8002aba <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002ab4:	f7ff fec5 	bl	8002842 <USBD_CtlError.constprop.0>
      break;
 8002ab8:	e7ee      	b.n	8002a98 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002aba:	884a      	ldrh	r2, [r1, #2]
 8002abc:	b922      	cbnz	r2, 8002ac8 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002abe:	065e      	lsls	r6, r3, #25
 8002ac0:	d002      	beq.n	8002ac8 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f000 fc48 	bl	8003358 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002ac8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002acc:	4629      	mov	r1, r5
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	f000 f890 	bl	8002bfa <USBD_CtlSendStatus>
 8002ada:	e7dd      	b.n	8002a98 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8002adc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ae0:	2a02      	cmp	r2, #2
 8002ae2:	d026      	beq.n	8002b32 <USBD_StdEPReq+0xb6>
 8002ae4:	2a03      	cmp	r2, #3
 8002ae6:	d1e5      	bne.n	8002ab4 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002ae8:	884a      	ldrh	r2, [r1, #2]
 8002aea:	2a00      	cmp	r2, #0
 8002aec:	d1d4      	bne.n	8002a98 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8002aee:	0659      	lsls	r1, r3, #25
 8002af0:	d0f0      	beq.n	8002ad4 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002af2:	4619      	mov	r1, r3
 8002af4:	f000 fc3e 	bl	8003374 <USBD_LL_ClearStallEP>
 8002af8:	e7e6      	b.n	8002ac8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8002afa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002afe:	2a02      	cmp	r2, #2
 8002b00:	d017      	beq.n	8002b32 <USBD_StdEPReq+0xb6>
 8002b02:	2a03      	cmp	r2, #3
 8002b04:	d1d6      	bne.n	8002ab4 <USBD_StdEPReq+0x38>
 8002b06:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002b0a:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002b0e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002b12:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002b14:	bf14      	ite	ne
 8002b16:	3514      	addne	r5, #20
 8002b18:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002b1c:	f000 fc38 	bl	8003390 <USBD_LL_IsStallEP>
 8002b20:	b168      	cbz	r0, 8002b3e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002b22:	2301      	movs	r3, #1
 8002b24:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002b26:	2202      	movs	r2, #2
 8002b28:	4629      	mov	r1, r5
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	f000 f839 	bl	8002ba2 <USBD_CtlSendData>
      break;
 8002b30:	e7b2      	b.n	8002a98 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002b32:	065a      	lsls	r2, r3, #25
 8002b34:	d0b0      	beq.n	8002a98 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002b36:	4619      	mov	r1, r3
 8002b38:	f000 fc0e 	bl	8003358 <USBD_LL_StallEP>
 8002b3c:	e7ac      	b.n	8002a98 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8002b3e:	6028      	str	r0, [r5, #0]
 8002b40:	e7f1      	b.n	8002b26 <USBD_StdEPReq+0xaa>

08002b42 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002b42:	780b      	ldrb	r3, [r1, #0]
 8002b44:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002b46:	784b      	ldrb	r3, [r1, #1]
 8002b48:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002b4a:	78ca      	ldrb	r2, [r1, #3]
 8002b4c:	788b      	ldrb	r3, [r1, #2]
 8002b4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b52:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002b54:	794a      	ldrb	r2, [r1, #5]
 8002b56:	790b      	ldrb	r3, [r1, #4]
 8002b58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b5c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002b5e:	79ca      	ldrb	r2, [r1, #7]
 8002b60:	798b      	ldrb	r3, [r1, #6]
 8002b62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002b66:	80c3      	strh	r3, [r0, #6]
 8002b68:	4770      	bx	lr

08002b6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002b6a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8002b6c:	b188      	cbz	r0, 8002b92 <USBD_GetString+0x28>
 8002b6e:	4605      	mov	r5, r0
 8002b70:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002b72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2c00      	cmp	r4, #0
 8002b7a:	d1f9      	bne.n	8002b70 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	3302      	adds	r3, #2
 8002b80:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8002b82:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002b84:	2303      	movs	r3, #3
 8002b86:	704b      	strb	r3, [r1, #1]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	3801      	subs	r0, #1
    while (*desc != '\0') 
 8002b8c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002b90:	b905      	cbnz	r5, 8002b94 <USBD_GetString+0x2a>
 8002b92:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	54cd      	strb	r5, [r1, r3]
 8002b98:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	548c      	strb	r4, [r1, r2]
 8002ba0:	e7f4      	b.n	8002b8c <USBD_GetString+0x22>

08002ba2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002ba2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002ba4:	2202      	movs	r2, #2
{
 8002ba6:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002ba8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002bac:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002bae:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002bb0:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	f000 fc0a 	bl	80033cc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002bb8:	2000      	movs	r0, #0
 8002bba:	bd10      	pop	{r4, pc}

08002bbc <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002bbc:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	460a      	mov	r2, r1
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	f000 fc02 	bl	80033cc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002bc8:	2000      	movs	r0, #0
 8002bca:	bd08      	pop	{r3, pc}

08002bcc <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002bcc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002bce:	2203      	movs	r2, #3
{
 8002bd0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002bd2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002bd6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002bda:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8002bdc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002be0:	2100      	movs	r1, #0
 8002be2:	f000 fc01 	bl	80033e8 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002be6:	2000      	movs	r0, #0
 8002be8:	bd10      	pop	{r4, pc}

08002bea <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002bea:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8002bec:	4613      	mov	r3, r2
 8002bee:	460a      	mov	r2, r1
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	f000 fbf9 	bl	80033e8 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	bd08      	pop	{r3, pc}

08002bfa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8002bfa:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002c02:	2300      	movs	r3, #0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	f000 fbe0 	bl	80033cc <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	bd08      	pop	{r3, pc}

08002c10 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002c10:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002c12:	2305      	movs	r3, #5
 8002c14:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002c18:	2300      	movs	r3, #0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f000 fbe3 	bl	80033e8 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002c22:	2000      	movs	r0, #0
 8002c24:	bd08      	pop	{r3, pc}

08002c26 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	2228      	movs	r2, #40	; 0x28
{
 8002c28:	b530      	push	{r4, r5, lr}
 8002c2a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2c:	eb0d 0002 	add.w	r0, sp, r2
 8002c30:	2100      	movs	r1, #0
 8002c32:	f000 fc8f 	bl	8003554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c36:	2214      	movs	r2, #20
 8002c38:	2100      	movs	r1, #0
 8002c3a:	eb0d 0002 	add.w	r0, sp, r2
 8002c3e:	f000 fc89 	bl	8003554 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c42:	2100      	movs	r1, #0
 8002c44:	2210      	movs	r2, #16
 8002c46:	a801      	add	r0, sp, #4
 8002c48:	f000 fc84 	bl	8003554 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c50:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c52:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c54:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c56:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c58:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c5e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c60:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c62:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c64:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c66:	f7fe f919 	bl	8000e9c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6c:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c6e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c74:	4629      	mov	r1, r5
 8002c76:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c78:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c7a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c7c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c80:	f7fe fad4 	bl	800122c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c84:	2312      	movs	r3, #18
 8002c86:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c8c:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002c8e:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c90:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c92:	f7fe fb7d 	bl	8001390 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002c96:	b015      	add	sp, #84	; 0x54
 8002c98:	bd30      	pop	{r4, r5, pc}
	...

08002c9c <main>:
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8002ca0:	f7fd fa78 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8002ca4:	f7ff ffbf 	bl	8002c26 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	2210      	movs	r2, #16
 8002caa:	2100      	movs	r1, #0
 8002cac:	a811      	add	r0, sp, #68	; 0x44
 8002cae:	f000 fc51 	bl	8003554 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	4b83      	ldr	r3, [pc, #524]	; (8002ec0 <main+0x224>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cb8:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cc2:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	619a      	str	r2, [r3, #24]
 8002cc8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	f002 0210 	and.w	r2, r2, #16
 8002cd2:	9200      	str	r2, [sp, #0]
 8002cd4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002cd8:	487a      	ldr	r0, [pc, #488]	; (8002ec4 <main+0x228>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	f042 0220 	orr.w	r2, r2, #32
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 8002ce2:	4d79      	ldr	r5, [pc, #484]	; (8002ec8 <main+0x22c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce4:	f002 0220 	and.w	r2, r2, #32
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	699a      	ldr	r2, [r3, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf2:	f042 0204 	orr.w	r2, r2, #4
 8002cf6:	619a      	str	r2, [r3, #24]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	f002 0204 	and.w	r2, r2, #4
 8002cfe:	9202      	str	r2, [sp, #8]
 8002d00:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	f042 0208 	orr.w	r2, r2, #8
 8002d08:	619a      	str	r2, [r3, #24]
 8002d0a:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	9303      	str	r3, [sp, #12]
 8002d14:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002d16:	f7fd fccf 	bl	80006b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d20:	486a      	ldr	r0, [pc, #424]	; (8002ecc <main+0x230>)
 8002d22:	f7fd fcc9 	bl	80006b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d26:	a911      	add	r1, sp, #68	; 0x44
 8002d28:	4866      	ldr	r0, [pc, #408]	; (8002ec4 <main+0x228>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d2a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d2e:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d36:	f7fd fbdf 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d3a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3e:	a911      	add	r1, sp, #68	; 0x44
 8002d40:	4862      	ldr	r0, [pc, #392]	; (8002ecc <main+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d42:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4c:	f7fd fbd4 	bl	80004f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002d50:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	a911      	add	r1, sp, #68	; 0x44
 8002d56:	485d      	ldr	r0, [pc, #372]	; (8002ecc <main+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002d58:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d5a:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5c:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5e:	f7fd fbcb 	bl	80004f8 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d62:	2210      	movs	r2, #16
 8002d64:	4621      	mov	r1, r4
 8002d66:	a806      	add	r0, sp, #24
 8002d68:	f000 fbf4 	bl	8003554 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6c:	221c      	movs	r2, #28
 8002d6e:	4621      	mov	r1, r4
 8002d70:	a80a      	add	r0, sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d72:	9404      	str	r4, [sp, #16]
 8002d74:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d76:	f000 fbed 	bl	8003554 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	221c      	movs	r2, #28
 8002d7e:	a811      	add	r0, sp, #68	; 0x44
 8002d80:	f000 fbe8 	bl	8003554 <memset>
  htim1.Init.Prescaler = 71;
 8002d84:	2347      	movs	r3, #71	; 0x47
 8002d86:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <main+0x234>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d88:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 71;
 8002d8a:	e885 000c 	stmia.w	r5, {r2, r3}
  htim1.Init.Period = 999;
 8002d8e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d92:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 999;
 8002d94:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d96:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d98:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d9c:	f7fe fdfc 	bl	8001998 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002da0:	a906      	add	r1, sp, #24
 8002da2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da4:	9606      	str	r6, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002da6:	f7fe fc40 	bl	800162a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002daa:	4628      	mov	r0, r5
 8002dac:	f7fe fe0e 	bl	80019cc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db0:	a904      	add	r1, sp, #16
 8002db2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db4:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db6:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002db8:	f7fe fed6 	bl	8001b68 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dbc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	a90a      	add	r1, sp, #40	; 0x28
 8002dc2:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc4:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8002dc6:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dc8:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dca:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dcc:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dce:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dd0:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dd2:	f7fe fe41 	bl	8001a58 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dd6:	a911      	add	r1, sp, #68	; 0x44
 8002dd8:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dda:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ddc:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dde:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002de0:	9414      	str	r4, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002de2:	9415      	str	r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002de4:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002de8:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dea:	f7fe fe97 	bl	8001b1c <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 f940 	bl	8003074 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002df4:	2210      	movs	r2, #16
 8002df6:	4621      	mov	r1, r4
 8002df8:	a811      	add	r0, sp, #68	; 0x44
 8002dfa:	f000 fbab 	bl	8003554 <memset>
  htim2.Init.Prescaler = 719;
 8002dfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e02:	f240 23cf 	movw	r3, #719	; 0x2cf
  htim2.Instance = TIM2;
 8002e06:	4d33      	ldr	r5, [pc, #204]	; (8002ed4 <main+0x238>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e08:	940a      	str	r4, [sp, #40]	; 0x28
  htim2.Init.Prescaler = 719;
 8002e0a:	e885 000a 	stmia.w	r5, {r1, r3}
  htim2.Init.Period = 99;
 8002e0e:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e10:	4628      	mov	r0, r5
  htim2.Init.Period = 99;
 8002e12:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e14:	940b      	str	r4, [sp, #44]	; 0x2c
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e16:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e18:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e1a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e1c:	f7fe fdbc 	bl	8001998 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e20:	a911      	add	r1, sp, #68	; 0x44
 8002e22:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e24:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e26:	f7fe fc00 	bl	800162a <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e2a:	a90a      	add	r1, sp, #40	; 0x28
 8002e2c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2e:	940a      	str	r4, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e30:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e32:	f7fe fe99 	bl	8001b68 <HAL_TIMEx_MasterConfigSynchronization>
  MX_USB_DEVICE_Init();
 8002e36:	f000 f981 	bl	800313c <MX_USB_DEVICE_Init>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002e3a:	2214      	movs	r2, #20
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	a811      	add	r0, sp, #68	; 0x44
 8002e40:	f000 fb88 	bl	8003554 <memset>
  htim3.Instance = TIM3;
 8002e44:	4e24      	ldr	r6, [pc, #144]	; (8002ed8 <main+0x23c>)
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <main+0x240>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e48:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 0;
 8002e4a:	e886 0018 	stmia.w	r6, {r3, r4}
  htim3.Init.Period = 0xffff;
 8002e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e52:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 0xffff;
 8002e54:	60f3      	str	r3, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e56:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e58:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5a:	940a      	str	r4, [sp, #40]	; 0x28
 8002e5c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e5e:	f7fe fd9b 	bl	8001998 <HAL_TIM_Base_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002e62:	2307      	movs	r3, #7
 8002e64:	9311      	str	r3, [sp, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002e66:	2350      	movs	r3, #80	; 0x50
 8002e68:	9312      	str	r3, [sp, #72]	; 0x48
  sSlaveConfig.TriggerFilter = 15;
 8002e6a:	230f      	movs	r3, #15
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002e6c:	a911      	add	r1, sp, #68	; 0x44
 8002e6e:	4630      	mov	r0, r6
  sSlaveConfig.TriggerFilter = 15;
 8002e70:	9315      	str	r3, [sp, #84]	; 0x54
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8002e72:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002e76:	f7fe fc91 	bl	800179c <HAL_TIM_SlaveConfigSynchronization>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e7a:	a90a      	add	r1, sp, #40	; 0x28
 8002e7c:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7e:	940a      	str	r4, [sp, #40]	; 0x28
  hadc1.Instance = ADC1;
 8002e80:	4e17      	ldr	r6, [pc, #92]	; (8002ee0 <main+0x244>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e82:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e84:	f7fe fe70 	bl	8001b68 <HAL_TIMEx_MasterConfigSynchronization>
  hadc1.Instance = ADC1;
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <main+0x248>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e8a:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 8002e8c:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e8e:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e92:	9411      	str	r4, [sp, #68]	; 0x44
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e94:	61f3      	str	r3, [r6, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e96:	9412      	str	r4, [sp, #72]	; 0x48
 8002e98:	9413      	str	r4, [sp, #76]	; 0x4c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e9a:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e9c:	60f4      	str	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e9e:	6174      	str	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ea0:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002ea2:	6137      	str	r7, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ea4:	f7fd fa40 	bl	8000328 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea8:	a911      	add	r1, sp, #68	; 0x44
 8002eaa:	4630      	mov	r0, r6
  sConfig.Channel = ADC_CHANNEL_0;
 8002eac:	9411      	str	r4, [sp, #68]	; 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eae:	9712      	str	r7, [sp, #72]	; 0x48
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002eb0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002eb2:	f7fd f993 	bl	80001dc <HAL_ADC_ConfigChannel>
  HAL_TIM_Base_Start_IT(&htim2);
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f7fe fbab 	bl	8001612 <HAL_TIM_Base_Start_IT>
 8002ebc:	e7fe      	b.n	8002ebc <main+0x220>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40011000 	.word	0x40011000
 8002ec8:	20000458 	.word	0x20000458
 8002ecc:	40010c00 	.word	0x40010c00
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	20000498 	.word	0x20000498
 8002ed8:	200003a8 	.word	0x200003a8
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	200003e8 	.word	0x200003e8
 8002ee4:	40012400 	.word	0x40012400

08002ee8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2){
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d10e      	bne.n	8002f0e <HAL_TIM_PeriodElapsedCallback+0x26>
		int i;
		for(i=0;i< TIMERS;i++){
			if(timers[i]!=0){
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	b11a      	cbz	r2, 8002f00 <HAL_TIM_PeriodElapsedCallback+0x18>
				timers[i]--; //resta los tiempos donde sean diferentes de cero
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	3a01      	subs	r2, #1
 8002efc:	b292      	uxth	r2, r2
 8002efe:	801a      	strh	r2, [r3, #0]
			if(timers[i]!=0){
 8002f00:	885a      	ldrh	r2, [r3, #2]
 8002f02:	b292      	uxth	r2, r2
 8002f04:	b11a      	cbz	r2, 8002f0e <HAL_TIM_PeriodElapsedCallback+0x26>
				timers[i]--; //resta los tiempos donde sean diferentes de cero
 8002f06:	885a      	ldrh	r2, [r3, #2]
 8002f08:	3a01      	subs	r2, #1
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	805a      	strh	r2, [r3, #2]
 8002f0e:	4770      	bx	lr
 8002f10:	200003a4 	.word	0x200003a4

08002f14 <CDC_Receive_Callback>:
}


void CDC_Receive_Callback(uint8_t *buf,uint32_t len){
	//P=atoi(buf);
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <CDC_Receive_Callback+0xc>)
 8002f1a:	f7fd bbd2 	b.w	80006c2 <HAL_GPIO_TogglePin>
 8002f1e:	bf00      	nop
 8002f20:	40011000 	.word	0x40011000

08002f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f28:	4b0e      	ldr	r3, [pc, #56]	; (8002f64 <HAL_MspInit+0x3c>)
{
 8002f2a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	619a      	str	r2, [r3, #24]
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	f002 0201 	and.w	r2, r2, #1
 8002f3a:	9200      	str	r2, [sp, #0]
 8002f3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f48:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f52:	6853      	ldr	r3, [r2, #4]
 8002f54:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	b002      	add	sp, #8
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40010000 	.word	0x40010000

08002f6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4604      	mov	r4, r0
 8002f70:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f72:	2210      	movs	r2, #16
 8002f74:	2100      	movs	r1, #0
 8002f76:	a802      	add	r0, sp, #8
 8002f78:	f000 faec 	bl	8003554 <memset>
  if(hadc->Instance==ADC1)
 8002f7c:	6822      	ldr	r2, [r4, #0]
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_ADC_MspInit+0x54>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d11b      	bne.n	8002fbc <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f84:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002f88:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f90:	619a      	str	r2, [r3, #24]
 8002f92:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f96:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002f9a:	9200      	str	r2, [sp, #0]
 8002f9c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	f042 0204 	orr.w	r2, r2, #4
 8002fa4:	619a      	str	r2, [r3, #24]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f7fd fa9e 	bl	80004f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd10      	pop	{r4, pc}
 8002fc0:	40012400 	.word	0x40012400
 8002fc4:	40010800 	.word	0x40010800

08002fc8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	2210      	movs	r2, #16
{
 8002fca:	b510      	push	{r4, lr}
 8002fcc:	4604      	mov	r4, r0
 8002fce:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	eb0d 0002 	add.w	r0, sp, r2
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	f000 fabd 	bl	8003554 <memset>
  if(htim_base->Instance==TIM1)
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	4a21      	ldr	r2, [pc, #132]	; (8003064 <HAL_TIM_Base_MspInit+0x9c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10b      	bne.n	8002ffa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fe2:	4b21      	ldr	r3, [pc, #132]	; (8003068 <HAL_TIM_Base_MspInit+0xa0>)
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fea:	619a      	str	r2, [r3, #24]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ff6:	b008      	add	sp, #32
 8002ff8:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM2)
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d113      	bne.n	8003028 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003000:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003004:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003006:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003010:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003012:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800301c:	f7fd fa16 	bl	800044c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003020:	201c      	movs	r0, #28
 8003022:	f7fd fa47 	bl	80004b4 <HAL_NVIC_EnableIRQ>
 8003026:	e7e6      	b.n	8002ff6 <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM3)
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <HAL_TIM_Base_MspInit+0xa4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d1e3      	bne.n	8002ff6 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <HAL_TIM_Base_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003030:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003032:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <HAL_TIM_Base_MspInit+0xa8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003036:	f042 0202 	orr.w	r2, r2, #2
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	f002 0202 	and.w	r2, r2, #2
 8003042:	9202      	str	r2, [sp, #8]
 8003044:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	f042 0204 	orr.w	r2, r2, #4
 800304c:	619a      	str	r2, [r3, #24]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	9303      	str	r3, [sp, #12]
 8003056:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003058:	2340      	movs	r3, #64	; 0x40
 800305a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305c:	f7fd fa4c 	bl	80004f8 <HAL_GPIO_Init>
}
 8003060:	e7c9      	b.n	8002ff6 <HAL_TIM_Base_MspInit+0x2e>
 8003062:	bf00      	nop
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40000400 	.word	0x40000400
 8003070:	40010800 	.word	0x40010800

08003074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003074:	b510      	push	{r4, lr}
 8003076:	4604      	mov	r4, r0
 8003078:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	2210      	movs	r2, #16
 800307c:	2100      	movs	r1, #0
 800307e:	a802      	add	r0, sp, #8
 8003080:	f000 fa68 	bl	8003554 <memset>
  if(htim->Instance==TIM1)
 8003084:	6822      	ldr	r2, [r4, #0]
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HAL_TIM_MspPostInit+0x48>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d114      	bne.n	80030b6 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003090:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	f042 0204 	orr.w	r2, r2, #4
 8003098:	619a      	str	r2, [r3, #24]
 800309a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309c:	4808      	ldr	r0, [pc, #32]	; (80030c0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b2:	f7fd fa21 	bl	80004f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80030b6:	b006      	add	sp, #24
 80030b8:	bd10      	pop	{r4, pc}
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40010800 	.word	0x40010800

080030c4 <NMI_Handler>:
 80030c4:	4770      	bx	lr

080030c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030c6:	e7fe      	b.n	80030c6 <HardFault_Handler>

080030c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	e7fe      	b.n	80030ca <BusFault_Handler>

080030cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030cc:	e7fe      	b.n	80030cc <UsageFault_Handler>

080030ce <SVC_Handler>:
 80030ce:	4770      	bx	lr

080030d0 <DebugMon_Handler>:
 80030d0:	4770      	bx	lr

080030d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d2:	4770      	bx	lr

080030d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d4:	f7fd b870 	b.w	80001b8 <HAL_IncTick>

080030d8 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80030d8:	4801      	ldr	r0, [pc, #4]	; (80030e0 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80030da:	f7fd bc03 	b.w	80008e4 <HAL_PCD_IRQHandler>
 80030de:	bf00      	nop
 80030e0:	20000ecc 	.word	0x20000ecc

080030e4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030e4:	4801      	ldr	r0, [pc, #4]	; (80030ec <TIM2_IRQHandler+0x8>)
 80030e6:	f7fe bb7d 	b.w	80017e4 <HAL_TIM_IRQHandler>
 80030ea:	bf00      	nop
 80030ec:	20000498 	.word	0x20000498

080030f0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <SystemInit+0x40>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <SystemInit+0x44>)
 80030fe:	400a      	ands	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800310c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003114:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800311c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800311e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003122:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003124:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <SystemInit+0x48>)
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	f8ff0000 	.word	0xf8ff0000
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800313c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800313e:	4c09      	ldr	r4, [pc, #36]	; (8003164 <MX_USB_DEVICE_Init+0x28>)
 8003140:	2200      	movs	r2, #0
 8003142:	4909      	ldr	r1, [pc, #36]	; (8003168 <MX_USB_DEVICE_Init+0x2c>)
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff fa5e 	bl	8002606 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800314a:	4908      	ldr	r1, [pc, #32]	; (800316c <MX_USB_DEVICE_Init+0x30>)
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff fa6f 	bl	8002630 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003152:	4620      	mov	r0, r4
 8003154:	4906      	ldr	r1, [pc, #24]	; (8003170 <MX_USB_DEVICE_Init+0x34>)
 8003156:	f7ff fa2e 	bl	80025b6 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800315a:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800315c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003160:	f7ff ba6d 	b.w	800263e <USBD_Start>
 8003164:	200004d8 	.word	0x200004d8
 8003168:	2000012c 	.word	0x2000012c
 800316c:	20000008 	.word	0x20000008
 8003170:	2000011c 	.word	0x2000011c

08003174 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003174:	2000      	movs	r0, #0
 8003176:	4770      	bx	lr

08003178 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003178:	2000      	movs	r0, #0
 800317a:	4770      	bx	lr

0800317c <CDC_Init_FS>:
{
 800317c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800317e:	4c06      	ldr	r4, [pc, #24]	; (8003198 <CDC_Init_FS+0x1c>)
 8003180:	2200      	movs	r2, #0
 8003182:	4906      	ldr	r1, [pc, #24]	; (800319c <CDC_Init_FS+0x20>)
 8003184:	4620      	mov	r0, r4
 8003186:	f7ff fa1d 	bl	80025c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800318a:	4905      	ldr	r1, [pc, #20]	; (80031a0 <CDC_Init_FS+0x24>)
 800318c:	4620      	mov	r0, r4
 800318e:	f7ff fa21 	bl	80025d4 <USBD_CDC_SetRxBuffer>
}
 8003192:	2000      	movs	r0, #0
 8003194:	bd10      	pop	{r4, pc}
 8003196:	bf00      	nop
 8003198:	200004d8 	.word	0x200004d8
 800319c:	20000ae4 	.word	0x20000ae4
 80031a0:	200006fc 	.word	0x200006fc

080031a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	4604      	mov	r4, r0
 80031a8:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80031aa:	4d07      	ldr	r5, [pc, #28]	; (80031c8 <CDC_Receive_FS+0x24>)
 80031ac:	4601      	mov	r1, r0
 80031ae:	4628      	mov	r0, r5
 80031b0:	f7ff fa10 	bl	80025d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80031b4:	4628      	mov	r0, r5
 80031b6:	f7ff fa13 	bl	80025e0 <USBD_CDC_ReceivePacket>
  CDC_Receive_Callback(Buf,Len[0]);
 80031ba:	4620      	mov	r0, r4
 80031bc:	6831      	ldr	r1, [r6, #0]
 80031be:	f7ff fea9 	bl	8002f14 <CDC_Receive_Callback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80031c2:	2000      	movs	r0, #0
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
 80031c6:	bf00      	nop
 80031c8:	200004d8 	.word	0x200004d8

080031cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80031cc:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <HAL_PCD_MspInit+0x38>)
 80031d0:	6802      	ldr	r2, [r0, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d112      	bne.n	80031fc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80031d6:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80031da:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031dc:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80031de:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031e2:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80031e6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031e8:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80031ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031f2:	f7fd f92b 	bl	800044c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80031f6:	2014      	movs	r0, #20
 80031f8:	f7fd f95c 	bl	80004b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80031fc:	b003      	add	sp, #12
 80031fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003202:	bf00      	nop
 8003204:	40005c00 	.word	0x40005c00

08003208 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003208:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800320c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003210:	f7ff ba2c 	b.w	800266c <USBD_LL_SetupStage>

08003214 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003214:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003218:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 800321c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003220:	f7ff ba51 	b.w	80026c6 <USBD_LL_DataOutStage>

08003224 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003224:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322a:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800322e:	f7ff ba7c 	b.w	800272a <USBD_LL_DataInStage>

08003232 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003232:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003236:	f7ff baf8 	b.w	800282a <USBD_LL_SOF>

0800323a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800323a:	b510      	push	{r4, lr}
 800323c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800323e:	2101      	movs	r1, #1
 8003240:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003244:	f7ff fadf 	bl	8002806 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003248:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 800324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003250:	f7ff baba 	b.w	80027c8 <USBD_LL_Reset>

08003254 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003254:	b510      	push	{r4, lr}
 8003256:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003258:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800325c:	f7ff fad6 	bl	800280c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003260:	69a3      	ldr	r3, [r4, #24]
 8003262:	b123      	cbz	r3, 800326e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003264:	4a02      	ldr	r2, [pc, #8]	; (8003270 <HAL_PCD_SuspendCallback+0x1c>)
 8003266:	6913      	ldr	r3, [r2, #16]
 8003268:	f043 0306 	orr.w	r3, r3, #6
 800326c:	6113      	str	r3, [r2, #16]
 800326e:	bd10      	pop	{r4, pc}
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003274:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003278:	f7ff bad1 	b.w	800281e <USBD_LL_Resume>

0800327c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800327c:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800327e:	2302      	movs	r3, #2
 8003280:	2208      	movs	r2, #8
 8003282:	f04f 0e03 	mov.w	lr, #3
{
 8003286:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003288:	491b      	ldr	r1, [pc, #108]	; (80032f8 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.pData = pdev;
 800328a:	481c      	ldr	r0, [pc, #112]	; (80032fc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 800328c:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003290:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003292:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003296:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800329a:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800329c:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800329e:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80032a0:	f7fd fa13 	bl	80006ca <HAL_PCD_Init>
 80032a4:	b108      	cbz	r0, 80032aa <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 80032a6:	f7ff fe3d 	bl	8002f24 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2318      	movs	r3, #24
 80032ae:	4611      	mov	r1, r2
 80032b0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80032b4:	f7fd fdda 	bl	8000e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80032b8:	2358      	movs	r3, #88	; 0x58
 80032ba:	2200      	movs	r2, #0
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80032c2:	f7fd fdd3 	bl	8000e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80032c6:	23c0      	movs	r3, #192	; 0xc0
 80032c8:	2200      	movs	r2, #0
 80032ca:	2181      	movs	r1, #129	; 0x81
 80032cc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80032d0:	f7fd fdcc 	bl	8000e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80032d4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80032d8:	2200      	movs	r2, #0
 80032da:	2101      	movs	r1, #1
 80032dc:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80032e0:	f7fd fdc4 	bl	8000e6c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	2200      	movs	r2, #0
 80032ea:	2182      	movs	r1, #130	; 0x82
 80032ec:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80032f0:	f7fd fdbc 	bl	8000e6c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 80032f4:	2000      	movs	r0, #0
 80032f6:	bd10      	pop	{r4, pc}
 80032f8:	40005c00 	.word	0x40005c00
 80032fc:	20000ecc 	.word	0x20000ecc

08003300 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003300:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003302:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003306:	f7fd fa49 	bl	800079c <HAL_PCD_Start>
 800330a:	2803      	cmp	r0, #3
 800330c:	bf9a      	itte	ls
 800330e:	4b02      	ldrls	r3, [pc, #8]	; (8003318 <USBD_LL_Start+0x18>)
 8003310:	5c18      	ldrbls	r0, [r3, r0]
 8003312:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003314:	bd08      	pop	{r3, pc}
 8003316:	bf00      	nop
 8003318:	0800359c 	.word	0x0800359c

0800331c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800331c:	b510      	push	{r4, lr}
 800331e:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003320:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003324:	4613      	mov	r3, r2
 8003326:	4622      	mov	r2, r4
 8003328:	f7fd fa63 	bl	80007f2 <HAL_PCD_EP_Open>
 800332c:	2803      	cmp	r0, #3
 800332e:	bf9a      	itte	ls
 8003330:	4b01      	ldrls	r3, [pc, #4]	; (8003338 <USBD_LL_OpenEP+0x1c>)
 8003332:	5c18      	ldrbls	r0, [r3, r0]
 8003334:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003336:	bd10      	pop	{r4, pc}
 8003338:	0800359c 	.word	0x0800359c

0800333c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800333c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800333e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003342:	f7fd fa79 	bl	8000838 <HAL_PCD_EP_Close>
 8003346:	2803      	cmp	r0, #3
 8003348:	bf9a      	itte	ls
 800334a:	4b02      	ldrls	r3, [pc, #8]	; (8003354 <USBD_LL_CloseEP+0x18>)
 800334c:	5c18      	ldrbls	r0, [r3, r0]
 800334e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003350:	bd08      	pop	{r3, pc}
 8003352:	bf00      	nop
 8003354:	0800359c 	.word	0x0800359c

08003358 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003358:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800335a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800335e:	f7fd fd39 	bl	8000dd4 <HAL_PCD_EP_SetStall>
 8003362:	2803      	cmp	r0, #3
 8003364:	bf9a      	itte	ls
 8003366:	4b02      	ldrls	r3, [pc, #8]	; (8003370 <USBD_LL_StallEP+0x18>)
 8003368:	5c18      	ldrbls	r0, [r3, r0]
 800336a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 800336c:	bd08      	pop	{r3, pc}
 800336e:	bf00      	nop
 8003370:	0800359c 	.word	0x0800359c

08003374 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003374:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003376:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800337a:	f7fd fd54 	bl	8000e26 <HAL_PCD_EP_ClrStall>
 800337e:	2803      	cmp	r0, #3
 8003380:	bf9a      	itte	ls
 8003382:	4b02      	ldrls	r3, [pc, #8]	; (800338c <USBD_LL_ClearStallEP+0x18>)
 8003384:	5c18      	ldrbls	r0, [r3, r0]
 8003386:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003388:	bd08      	pop	{r3, pc}
 800338a:	bf00      	nop
 800338c:	0800359c 	.word	0x0800359c

08003390 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003390:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003392:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003396:	bf45      	ittet	mi
 8003398:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 800339c:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80033a0:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80033a4:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80033a8:	bf58      	it	pl
 80033aa:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 80033ae:	4770      	bx	lr

080033b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80033b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80033b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033b6:	f7fd fa08 	bl	80007ca <HAL_PCD_SetAddress>
 80033ba:	2803      	cmp	r0, #3
 80033bc:	bf9a      	itte	ls
 80033be:	4b02      	ldrls	r3, [pc, #8]	; (80033c8 <USBD_LL_SetUSBAddress+0x18>)
 80033c0:	5c18      	ldrbls	r0, [r3, r0]
 80033c2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80033c4:	bd08      	pop	{r3, pc}
 80033c6:	bf00      	nop
 80033c8:	0800359c 	.word	0x0800359c

080033cc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80033cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80033ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033d2:	f7fd fa71 	bl	80008b8 <HAL_PCD_EP_Transmit>
 80033d6:	2803      	cmp	r0, #3
 80033d8:	bf9a      	itte	ls
 80033da:	4b02      	ldrls	r3, [pc, #8]	; (80033e4 <USBD_LL_Transmit+0x18>)
 80033dc:	5c18      	ldrbls	r0, [r3, r0]
 80033de:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 80033e0:	bd08      	pop	{r3, pc}
 80033e2:	bf00      	nop
 80033e4:	0800359c 	.word	0x0800359c

080033e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80033e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80033ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80033ee:	f7fd fa44 	bl	800087a <HAL_PCD_EP_Receive>
 80033f2:	2803      	cmp	r0, #3
 80033f4:	bf9a      	itte	ls
 80033f6:	4b02      	ldrls	r3, [pc, #8]	; (8003400 <USBD_LL_PrepareReceive+0x18>)
 80033f8:	5c18      	ldrbls	r0, [r3, r0]
 80033fa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80033fc:	bd08      	pop	{r3, pc}
 80033fe:	bf00      	nop
 8003400:	0800359c 	.word	0x0800359c

08003404 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003404:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003406:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800340a:	f7fd fa4e 	bl	80008aa <HAL_PCD_EP_GetRxCount>
}
 800340e:	bd08      	pop	{r3, pc}

08003410 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003410:	4800      	ldr	r0, [pc, #0]	; (8003414 <USBD_static_malloc+0x4>)
 8003412:	4770      	bx	lr
 8003414:	20000180 	.word	0x20000180

08003418 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003418:	4770      	bx	lr

0800341a <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 800341a:	4770      	bx	lr

0800341c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800341c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800341e:	4801      	ldr	r0, [pc, #4]	; (8003424 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003420:	800b      	strh	r3, [r1, #0]
}
 8003422:	4770      	bx	lr
 8003424:	20000148 	.word	0x20000148

08003428 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8003428:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800342a:	4801      	ldr	r0, [pc, #4]	; (8003430 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 800342c:	800b      	strh	r3, [r1, #0]
}
 800342e:	4770      	bx	lr
 8003430:	2000015c 	.word	0x2000015c

08003434 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003434:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003436:	4c04      	ldr	r4, [pc, #16]	; (8003448 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003438:	460a      	mov	r2, r1
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800343c:	4621      	mov	r1, r4
 800343e:	f7ff fb94 	bl	8002b6a <USBD_GetString>
  return USBD_StrDesc;
}
 8003442:	4620      	mov	r0, r4
 8003444:	bd10      	pop	{r4, pc}
 8003446:	bf00      	nop
 8003448:	2000132c 	.word	0x2000132c
 800344c:	080035b9 	.word	0x080035b9

08003450 <USBD_FS_ProductStrDescriptor>:
{
 8003450:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003452:	4c04      	ldr	r4, [pc, #16]	; (8003464 <USBD_FS_ProductStrDescriptor+0x14>)
 8003454:	460a      	mov	r2, r1
 8003456:	4804      	ldr	r0, [pc, #16]	; (8003468 <USBD_FS_ProductStrDescriptor+0x18>)
 8003458:	4621      	mov	r1, r4
 800345a:	f7ff fb86 	bl	8002b6a <USBD_GetString>
}
 800345e:	4620      	mov	r0, r4
 8003460:	bd10      	pop	{r4, pc}
 8003462:	bf00      	nop
 8003464:	2000132c 	.word	0x2000132c
 8003468:	080035cc 	.word	0x080035cc

0800346c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800346c:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800346e:	4c04      	ldr	r4, [pc, #16]	; (8003480 <USBD_FS_SerialStrDescriptor+0x14>)
 8003470:	460a      	mov	r2, r1
 8003472:	4804      	ldr	r0, [pc, #16]	; (8003484 <USBD_FS_SerialStrDescriptor+0x18>)
 8003474:	4621      	mov	r1, r4
 8003476:	f7ff fb78 	bl	8002b6a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800347a:	4620      	mov	r0, r4
 800347c:	bd10      	pop	{r4, pc}
 800347e:	bf00      	nop
 8003480:	2000132c 	.word	0x2000132c
 8003484:	080035e2 	.word	0x080035e2

08003488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003488:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800348a:	4c04      	ldr	r4, [pc, #16]	; (800349c <USBD_FS_ConfigStrDescriptor+0x14>)
 800348c:	460a      	mov	r2, r1
 800348e:	4804      	ldr	r0, [pc, #16]	; (80034a0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003490:	4621      	mov	r1, r4
 8003492:	f7ff fb6a 	bl	8002b6a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8003496:	4620      	mov	r0, r4
 8003498:	bd10      	pop	{r4, pc}
 800349a:	bf00      	nop
 800349c:	2000132c 	.word	0x2000132c
 80034a0:	080035a0 	.word	0x080035a0

080034a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80034a4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80034a6:	4c04      	ldr	r4, [pc, #16]	; (80034b8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 80034a8:	460a      	mov	r2, r1
 80034aa:	4804      	ldr	r0, [pc, #16]	; (80034bc <USBD_FS_InterfaceStrDescriptor+0x18>)
 80034ac:	4621      	mov	r1, r4
 80034ae:	f7ff fb5c 	bl	8002b6a <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 80034b2:	4620      	mov	r0, r4
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	bf00      	nop
 80034b8:	2000132c 	.word	0x2000132c
 80034bc:	080035ab 	.word	0x080035ab

080034c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80034c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80034c2:	e003      	b.n	80034cc <LoopCopyDataInit>

080034c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80034c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80034c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80034ca:	3104      	adds	r1, #4

080034cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80034cc:	480a      	ldr	r0, [pc, #40]	; (80034f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80034d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80034d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80034d4:	d3f6      	bcc.n	80034c4 <CopyDataInit>
  ldr r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80034d8:	e002      	b.n	80034e0 <LoopFillZerobss>

080034da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80034dc:	f842 3b04 	str.w	r3, [r2], #4

080034e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80034e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80034e4:	d3f9      	bcc.n	80034da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80034e6:	f7ff fe03 	bl	80030f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ea:	f000 f80f 	bl	800350c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80034ee:	f7ff fbd5 	bl	8002c9c <main>
  bx lr
 80034f2:	4770      	bx	lr
  ldr r3, =_sidata
 80034f4:	080035f8 	.word	0x080035f8
  ldr r0, =_sdata
 80034f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80034fc:	20000160 	.word	0x20000160
  ldr r2, =_sbss
 8003500:	20000160 	.word	0x20000160
  ldr r3, = _ebss
 8003504:	2000152c 	.word	0x2000152c

08003508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC1_2_IRQHandler>
	...

0800350c <__libc_init_array>:
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	2500      	movs	r5, #0
 8003510:	4e0c      	ldr	r6, [pc, #48]	; (8003544 <__libc_init_array+0x38>)
 8003512:	4c0d      	ldr	r4, [pc, #52]	; (8003548 <__libc_init_array+0x3c>)
 8003514:	1ba4      	subs	r4, r4, r6
 8003516:	10a4      	asrs	r4, r4, #2
 8003518:	42a5      	cmp	r5, r4
 800351a:	d109      	bne.n	8003530 <__libc_init_array+0x24>
 800351c:	f000 f822 	bl	8003564 <_init>
 8003520:	2500      	movs	r5, #0
 8003522:	4e0a      	ldr	r6, [pc, #40]	; (800354c <__libc_init_array+0x40>)
 8003524:	4c0a      	ldr	r4, [pc, #40]	; (8003550 <__libc_init_array+0x44>)
 8003526:	1ba4      	subs	r4, r4, r6
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	42a5      	cmp	r5, r4
 800352c:	d105      	bne.n	800353a <__libc_init_array+0x2e>
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003534:	4798      	blx	r3
 8003536:	3501      	adds	r5, #1
 8003538:	e7ee      	b.n	8003518 <__libc_init_array+0xc>
 800353a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800353e:	4798      	blx	r3
 8003540:	3501      	adds	r5, #1
 8003542:	e7f2      	b.n	800352a <__libc_init_array+0x1e>
 8003544:	080035f0 	.word	0x080035f0
 8003548:	080035f0 	.word	0x080035f0
 800354c:	080035f0 	.word	0x080035f0
 8003550:	080035f4 	.word	0x080035f4

08003554 <memset>:
 8003554:	4603      	mov	r3, r0
 8003556:	4402      	add	r2, r0
 8003558:	4293      	cmp	r3, r2
 800355a:	d100      	bne.n	800355e <memset+0xa>
 800355c:	4770      	bx	lr
 800355e:	f803 1b01 	strb.w	r1, [r3], #1
 8003562:	e7f9      	b.n	8003558 <memset+0x4>

08003564 <_init>:
 8003564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003566:	bf00      	nop
 8003568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800356a:	bc08      	pop	{r3}
 800356c:	469e      	mov	lr, r3
 800356e:	4770      	bx	lr

08003570 <_fini>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr
